{
  "version": 3,
  "sources": ["../src/encodeQueryParams.ts"],
  "sourcesContent": ["import { DecodedValueMap, QueryParamConfigMap, EncodedValueMap } from './types';\n\n/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function encodeQueryParams<QPCMap extends QueryParamConfigMap>(\n  paramConfigMap: QPCMap,\n  query: Partial<DecodedValueMap<QPCMap>>\n): Partial<EncodedValueMap<QPCMap>> {\n  const encodedQuery: Partial<EncodedValueMap<QPCMap>> = {};\n\n  const paramNames = Object.keys(query);\n  for (const paramName of paramNames) {\n    const decodedValue = query[paramName];\n\n    if (!paramConfigMap[paramName]) {\n      // NOTE: we could just not encode it, but it is probably convenient to have\n      // it be included by default as a string type.\n      (encodedQuery as any)[paramName] =\n        decodedValue == null ? decodedValue : String(decodedValue);\n    } else {\n      encodedQuery[paramName as keyof QPCMap] = paramConfigMap[\n        paramName\n      ].encode(query[paramName]);\n    }\n  }\n\n  return encodedQuery;\n}\nexport default encodeQueryParams;\n"],
  "mappings": "AASO,SAAS,kBACd,gBACA,OACkC;AAClC,QAAM,eAAiD,CAAC;AAExD,QAAM,aAAa,OAAO,KAAK,KAAK;AACpC,aAAW,aAAa,YAAY;AAClC,UAAM,eAAe,MAAM;AAE3B,QAAI,CAAC,eAAe,YAAY;AAG9B,MAAC,aAAqB,aACpB,gBAAgB,OAAO,eAAe,OAAO,YAAY;AAAA,IAC7D,OAAO;AACL,mBAAa,aAA6B,eACxC,WACA,OAAO,MAAM,UAAU;AAAA,IAC3B;AAAA,EACF;AAEA,SAAO;AACT;AACA,IAAO,4BAAQ;",
  "names": []
}
