{
  "version": 3,
  "sources": ["../src/params.ts"],
  "sourcesContent": ["import * as Serialize from './serialize';\nimport { QueryParamConfig } from './types';\n\n/**\n * String values\n */\nexport const StringParam: QueryParamConfig<\n  string | null | undefined,\n  string | null | undefined\n> = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString,\n};\n\n/**\n * String enum\n */\nexport const createEnumParam = <T extends string>(\n  enumValues: T[]\n): QueryParamConfig<T | null | undefined, T | null | undefined> => ({\n  encode: Serialize.encodeString,\n  decode: (input) => Serialize.decodeEnum(input, enumValues),\n});\n\n/**\n * Array enum\n */\nexport const createEnumArrayParam = <T extends string>(\n  enumValues: T[]\n): QueryParamConfig<T[] | null | undefined, T[] | null | undefined> => ({\n  encode: (text) =>\n    Serialize.encodeArray(text == null || Array.isArray(text) ? text : [text]),\n  decode: (input) => Serialize.decodeArrayEnum(input, enumValues),\n});\n\n/**\n * Array delimited enum\n */\nexport const createEnumDelimitedArrayParam = <T extends string>(\n  enumValues: T[],\n  entrySeparator = '_'\n): QueryParamConfig<T[] | null | undefined, T[] | null | undefined> => ({\n  encode: (text) =>\n    Serialize.encodeDelimitedArray(\n      text == null || Array.isArray(text) ? text : [text],\n      entrySeparator\n    ),\n  decode: (input) =>\n    Serialize.decodeDelimitedArrayEnum(input, enumValues, entrySeparator),\n});\n\n/**\n * Numbers (integers or floats)\n */\nexport const NumberParam: QueryParamConfig<\n  number | null | undefined,\n  number | null | undefined\n> = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber,\n};\n\n/**\n * For flat objects where values are strings\n */\nexport const ObjectParam: QueryParamConfig<\n  { [key: string]: string | undefined } | null | undefined,\n  { [key: string]: string | undefined } | null | undefined\n> = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject,\n};\n\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport const ArrayParam: QueryParamConfig<\n  (string | null)[] | null | undefined,\n  (string | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray,\n};\n\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport const NumericArrayParam: QueryParamConfig<\n  (number | null)[] | null | undefined,\n  (number | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray,\n};\n\n/**\n * For any type of data, encoded via JSON.stringify\n */\nexport const JsonParam: QueryParamConfig<any, any> = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson,\n};\n\n/**\n * For simple dates (YYYY-MM-DD)\n */\nexport const DateParam: QueryParamConfig<\n  Date | null | undefined,\n  Date | null | undefined\n> = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate,\n  equals: (\n    valueA: Date | null | undefined,\n    valueB: Date | null | undefined\n  ) => {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB;\n\n    // ignore time of day\n    return (\n      valueA.getFullYear() === valueB.getFullYear() &&\n      valueA.getMonth() === valueB.getMonth() &&\n      valueA.getDate() === valueB.getDate()\n    );\n  },\n};\n\n/**\n * For dates in simplified extended ISO format (YYYY-MM-DDTHH:mm:ss.sssZ or \u00B1YYYYYY-MM-DDTHH:mm:ss.sssZ)\n */\nexport const DateTimeParam: QueryParamConfig<\n  Date | null | undefined,\n  Date | null | undefined\n> = {\n  encode: Serialize.encodeDateTime,\n  decode: Serialize.decodeDateTime,\n  equals: (\n    valueA: Date | null | undefined,\n    valueB: Date | null | undefined\n  ) => {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB;\n\n    return valueA.valueOf() === valueB.valueOf();\n  },\n};\n\n/**\n * For boolean values: 1 = true, 0 = false\n */\nexport const BooleanParam: QueryParamConfig<\n  boolean | null | undefined,\n  boolean | null | undefined\n> = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean,\n};\n\n/**\n * For flat objects where the values are numbers\n */\nexport const NumericObjectParam: QueryParamConfig<\n  { [key: string]: number | null | undefined } | null | undefined,\n  { [key: string]: number | null | undefined } | null | undefined\n> = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject,\n};\n\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport const DelimitedArrayParam: QueryParamConfig<\n  (string | null)[] | null | undefined,\n  (string | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeDelimitedArray,\n  decode: Serialize.decodeDelimitedArray,\n};\n\n/**\n * For flat arrays where the values are numbers, filters out undefined values during decode\n */\nexport const DelimitedNumericArrayParam: QueryParamConfig<\n  (number | null)[] | null | undefined,\n  (number | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeDelimitedNumericArray,\n  decode: Serialize.decodeDelimitedNumericArray,\n};\n"],
  "mappings": "AAAA,YAAY,eAAe;AAMpB,MAAM,cAGT;AAAA,EACF,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AACpB;AAKO,MAAM,kBAAkB,CAC7B,gBACkE;AAAA,EAClE,QAAQ,UAAU;AAAA,EAClB,QAAQ,CAAC,UAAU,UAAU,WAAW,OAAO,UAAU;AAC3D;AAKO,MAAM,uBAAuB,CAClC,gBACsE;AAAA,EACtE,QAAQ,CAAC,SACP,UAAU,YAAY,QAAQ,QAAQ,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC;AAAA,EAC3E,QAAQ,CAAC,UAAU,UAAU,gBAAgB,OAAO,UAAU;AAChE;AAKO,MAAM,gCAAgC,CAC3C,YACA,iBAAiB,SACqD;AAAA,EACtE,QAAQ,CAAC,SACP,UAAU;AAAA,IACR,QAAQ,QAAQ,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,IAAI;AAAA,IAClD;AAAA,EACF;AAAA,EACF,QAAQ,CAAC,UACP,UAAU,yBAAyB,OAAO,YAAY,cAAc;AACxE;AAKO,MAAM,cAGT;AAAA,EACF,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AACpB;AAKO,MAAM,cAGT;AAAA,EACF,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AACpB;AAKO,MAAM,aAGT;AAAA,EACF,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AACpB;AAKO,MAAM,oBAGT;AAAA,EACF,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AACpB;AAKO,MAAM,YAAwC;AAAA,EACnD,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AACpB;AAKO,MAAM,YAGT;AAAA,EACF,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AAAA,EAClB,QAAQ,CACN,QACA,WACG;AACH,QAAI,WAAW;AAAQ,aAAO;AAC9B,QAAI,UAAU,QAAQ,UAAU;AAAM,aAAO,WAAW;AAGxD,WACE,OAAO,YAAY,MAAM,OAAO,YAAY,KAC5C,OAAO,SAAS,MAAM,OAAO,SAAS,KACtC,OAAO,QAAQ,MAAM,OAAO,QAAQ;AAAA,EAExC;AACF;AAKO,MAAM,gBAGT;AAAA,EACF,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AAAA,EAClB,QAAQ,CACN,QACA,WACG;AACH,QAAI,WAAW;AAAQ,aAAO;AAC9B,QAAI,UAAU,QAAQ,UAAU;AAAM,aAAO,WAAW;AAExD,WAAO,OAAO,QAAQ,MAAM,OAAO,QAAQ;AAAA,EAC7C;AACF;AAKO,MAAM,eAGT;AAAA,EACF,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AACpB;AAKO,MAAM,qBAGT;AAAA,EACF,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AACpB;AAKO,MAAM,sBAGT;AAAA,EACF,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AACpB;AAKO,MAAM,6BAGT;AAAA,EACF,QAAQ,UAAU;AAAA,EAClB,QAAQ,UAAU;AACpB;",
  "names": []
}
