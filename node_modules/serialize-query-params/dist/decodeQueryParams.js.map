{
  "version": 3,
  "sources": ["../src/decodeQueryParams.ts"],
  "sourcesContent": ["import { DecodedValueMap, QueryParamConfigMap, EncodedValueMap } from './types';\n\n/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function decodeQueryParams<QPCMap extends QueryParamConfigMap>(\n  paramConfigMap: QPCMap,\n  encodedQuery: Partial<EncodedValueMap<QPCMap>>\n): Partial<DecodedValueMap<QPCMap>> {\n  const decodedQuery: Partial<DecodedValueMap<QPCMap>> = {};\n\n  // iterate over all keys in the config (#30)\n  const paramNames = Object.keys(paramConfigMap);\n\n  // ensure any non configured keys that are in the URL are also included\n  for (const encodedKey of Object.keys(encodedQuery)) {\n    if (paramConfigMap[encodedKey] == null) {\n      paramNames.push(encodedKey);\n    }\n  }\n\n  for (const paramName of paramNames) {\n    const encodedValue = encodedQuery[paramName];\n\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\n          `Passing through parameter ${paramName} during decoding since it was not configured.`\n        );\n      }\n\n      // NOTE: we could just not include it, but it is probably convenient to have\n      // it default to be a string type.\n      (decodedQuery as any)[paramName] = encodedValue;\n    } else {\n      decodedQuery[paramName as keyof QPCMap] = paramConfigMap[\n        paramName\n      ].decode(encodedValue as string | (string | null)[] | null);\n    }\n  }\n\n  return decodedQuery;\n}\n"],
  "mappings": "AASO,SAAS,kBACd,gBACA,cACkC;AAClC,QAAM,eAAiD,CAAC;AAGxD,QAAM,aAAa,OAAO,KAAK,cAAc;AAG7C,aAAW,cAAc,OAAO,KAAK,YAAY,GAAG;AAClD,QAAI,eAAe,eAAe,MAAM;AACtC,iBAAW,KAAK,UAAU;AAAA,IAC5B;AAAA,EACF;AAEA,aAAW,aAAa,YAAY;AAClC,UAAM,eAAe,aAAa;AAElC,QAAI,CAAC,eAAe,YAAY;AAC9B,UAAI,MAAwC;AAC1C,gBAAQ;AAAA,UACN,6BAA6B;AAAA,QAC/B;AAAA,MACF;AAIA,MAAC,aAAqB,aAAa;AAAA,IACrC,OAAO;AACL,mBAAa,aAA6B,eACxC,WACA,OAAO,YAAiD;AAAA,IAC5D;AAAA,EACF;AAEA,SAAO;AACT;",
  "names": []
}
