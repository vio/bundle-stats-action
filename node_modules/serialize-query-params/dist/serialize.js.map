{
  "version": 3,
  "sources": ["../src/serialize.ts"],
  "sourcesContent": ["/**\n * Interprets an encoded string and returns either the string or null/undefined if not available.\n * Ignores array inputs (takes just first element in array)\n * @param input encoded string\n */\nfunction getEncodedValue(\n  input: string | (string | null)[] | null | undefined,\n  allowEmptyString?: boolean\n): string | null | undefined {\n  if (input == null) {\n    return input;\n  }\n  // '' or []\n  if (\n    input.length === 0 &&\n    (!allowEmptyString || (allowEmptyString && input !== ''))\n  ) {\n    return null;\n  }\n\n  const str = input instanceof Array ? input[0] : input;\n  if (str == null) {\n    return str;\n  }\n  if (!allowEmptyString && str === '') {\n    return null;\n  }\n\n  return str;\n}\n\n/**\n * Interprets an encoded string and return null/undefined or an array with\n * the encoded string contents\n * @param input encoded string\n */\nfunction getEncodedValueArray(\n  input: string | (string | null)[] | null | undefined\n): (string | null)[] | null | undefined {\n  if (input == null) {\n    return input;\n  }\n\n  return input instanceof Array ? input : input === '' ? [] : [input];\n}\n\n/**\n * Encodes a date as a string in YYYY-MM-DD format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\nexport function encodeDate(\n  date: Date | null | undefined\n): string | null | undefined {\n  if (date == null) {\n    return date;\n  }\n\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n\n  return `${year}-${month < 10 ? `0${month}` : month}-${\n    day < 10 ? `0${day}` : day\n  }`;\n}\n\n/**\n * Converts a date in the format 'YYYY-mm-dd...' into a proper date, because\n * new Date() does not do that correctly. The date can be as complete or incomplete\n * as necessary (aka, '2015', '2015-10', '2015-10-01').\n * It will not work for dates that have times included in them.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '2015-10-01'\n * @return {Date} parsed date\n */\nexport function decodeDate(\n  input: string | (string | null)[] | null | undefined\n): Date | null | undefined {\n  const dateString = getEncodedValue(input);\n  if (dateString == null) return dateString;\n\n  const parts = dateString.split('-') as any;\n  // may only be a year so won't even have a month\n  if (parts[1] != null) {\n    parts[1] -= 1; // Note: months are 0-based\n  } else {\n    // just a year, set the month and day to the first\n    parts[1] = 0;\n    parts[2] = 1;\n  }\n\n  const decoded = new Date(...(parts as [number, number, number]));\n\n  if (isNaN(decoded.getTime())) {\n    return null;\n  }\n\n  return decoded;\n}\n\n/**\n * Encodes a date as a string in ISO 8601 (\"2019-05-28T10:58:40Z\") format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\nexport function encodeDateTime(\n  date: Date | null | undefined\n): string | null | undefined {\n  if (date == null) {\n    return date;\n  }\n\n  return date.toISOString();\n}\n\n/**\n * Converts a date in the https://en.wikipedia.org/wiki/ISO_8601 format.\n * For allowed inputs see specs:\n *  - https://tools.ietf.org/html/rfc2822#page-14\n *  - http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '1995-12-17T03:24:00'\n * @return {Date} parsed date\n */\nexport function decodeDateTime(\n  input: string | (string | null)[] | null | undefined\n): Date | null | undefined {\n  const dateString = getEncodedValue(input);\n  if (dateString == null) return dateString;\n\n  const decoded = new Date(dateString);\n\n  if (isNaN(decoded.getTime())) {\n    return null;\n  }\n\n  return decoded;\n}\n\n/**\n * Encodes a boolean as a string. true -> \"1\", false -> \"0\".\n *\n * @param {Boolean} bool\n * @return {String} the encoded boolean\n */\nexport function encodeBoolean(\n  bool: boolean | null | undefined\n): string | null | undefined {\n  if (bool == null) {\n    return bool;\n  }\n\n  return bool ? '1' : '0';\n}\n\n/**\n * Decodes a boolean from a string. \"1\" -> true, \"0\" -> false.\n * Everything else maps to undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded boolean string\n * @return {Boolean} the boolean value\n */\nexport function decodeBoolean(\n  input: string | (string | null)[] | null | undefined\n): boolean | null | undefined {\n  const boolStr = getEncodedValue(input);\n  if (boolStr == null) return boolStr;\n\n  if (boolStr === '1') {\n    return true;\n  } else if (boolStr === '0') {\n    return false;\n  }\n\n  return null;\n}\n\n/**\n * Encodes a number as a string.\n *\n * @param {Number} num\n * @return {String} the encoded number\n */\nexport function encodeNumber(\n  num: number | null | undefined\n): string | null | undefined {\n  if (num == null) {\n    return num;\n  }\n\n  return String(num);\n}\n\n/**\n * Decodes a number from a string. If the number is invalid,\n * it returns undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded number string\n * @return {Number} the number value\n */\nexport function decodeNumber(\n  input: string | (string | null)[] | null | undefined\n): number | null | undefined {\n  const numStr = getEncodedValue(input);\n  if (numStr == null) return numStr;\n  if (numStr === '') return null;\n\n  const result = +numStr;\n  return result;\n}\n\n/**\n * Encodes a string while safely handling null and undefined values.\n *\n * @param {String} str a string to encode\n * @return {String} the encoded string\n */\nexport function encodeString(\n  str: string | (string | null)[] | null | undefined\n): string | null | undefined {\n  if (str == null) {\n    return str;\n  }\n\n  return String(str);\n}\n\n/**\n * Decodes a string while safely handling null and undefined values.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded string\n * @return {String} the string value\n */\nexport function decodeString(\n  input: string | (string | null)[] | null | undefined\n): string | null | undefined {\n  const str = getEncodedValue(input, true);\n  if (str == null) return str;\n\n  return String(str);\n}\n\n/**\n * Decodes an enum value while safely handling null and undefined values.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded string\n * @param {String[]} enumValues allowed enum values\n * @return {String} the string value from enumValues\n */\nexport function decodeEnum<T extends string>(\n  input: string | (string | null)[] | null | undefined,\n  enumValues: T[]\n): T | null | undefined {\n  const str = decodeString(input);\n  if (str == null) return str;\n  return enumValues.includes(str as any) ? (str as T) : undefined;\n}\n\n/**\n * Decodes an enum value from arrays while safely handling null and undefined values.\n *\n * @template T\n * @param {String} input the encoded string\n * @param {T[]} enumValues allowed enum values\n * @return {T[]} the string value from enumValues\n */\nexport function decodeArrayEnum<T extends string>(\n  input: string | (string | null)[] | null | undefined,\n  enumValues: T[]\n): T[] | null | undefined {\n  const arr = decodeArray(input);\n  if (arr == null) return arr;\n  if (!arr.length) return undefined;\n  return arr.every((str) => str != null && enumValues.includes(str as T))\n    ? (arr as T[])\n    : undefined;\n}\n\n/**\n * Decodes an enum value from arrays while safely handling null and undefined values.\n *\n * @template T\n * @param {String} input the encoded string\n * @param {T[]} enumValues allowed enum values\n * @param entrySeparator The array as a string with elements joined by the\n * entry separator\n * @return {T[]} the string value from enumValues\n */\nexport function decodeDelimitedArrayEnum<T extends string>(\n  input: string | (string | null)[] | null | undefined,\n  enumValues: T[],\n  entrySeparator = '_'\n): T[] | null | undefined {\n  if (input != null && Array.isArray(input) && !input.length) return undefined;\n  const arr = decodeDelimitedArray(input, entrySeparator);\n  return decodeArrayEnum(arr, enumValues);\n}\n\n/**\n * Encodes anything as a JSON string.\n *\n * @param {Any} any The thing to be encoded\n * @return {String} The JSON string representation of any\n */\nexport function encodeJson(\n  any: any | null | undefined\n): string | null | undefined {\n  if (any == null) {\n    return any;\n  }\n\n  return JSON.stringify(any);\n}\n\n/**\n * Decodes a JSON string into javascript\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @return {Any} The javascript representation\n */\nexport function decodeJson(\n  input: string | (string | null)[] | null | undefined\n): any | null | undefined {\n  const jsonStr = getEncodedValue(input);\n  if (jsonStr == null) return jsonStr;\n\n  let result = null;\n  try {\n    result = JSON.parse(jsonStr);\n  } catch (e) {\n    /* ignore errors, returning undefined */\n  }\n\n  return result;\n}\n\n/**\n * Encodes an array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\nexport function encodeArray(\n  array: (string | null)[] | null | undefined\n): (string | null)[] | null | undefined {\n  if (array == null) {\n    return array;\n  }\n\n  return array;\n}\n\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\nexport function decodeArray(\n  input: string | (string | null)[] | null | undefined\n): (string | null)[] | null | undefined {\n  const arr = getEncodedValueArray(input);\n  if (arr == null) return arr;\n\n  return arr;\n}\n\n/**\n * Encodes a numeric array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\nexport function encodeNumericArray(\n  array: (number | null)[] | null | undefined\n): (string | null)[] | null | undefined {\n  if (array == null) {\n    return array;\n  }\n\n  return array.map(String);\n}\n\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined and NaN values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\nexport function decodeNumericArray(\n  input: string | (string | null)[] | null | undefined\n): (number | null)[] | null | undefined {\n  const arr = decodeArray(input);\n  if (arr == null) return arr;\n\n  return arr.map((d) => (d === '' || d == null ? null : +d));\n}\n\n/**\n * Encodes an array as a delimited string. For example,\n * ['a', 'b'] -> 'a_b' with entrySeparator='_'\n *\n * @param array The array to be encoded\n * @param entrySeparator The string used to delimit entries\n * @return The array as a string with elements joined by the\n * entry separator\n */\nexport function encodeDelimitedArray(\n  array: (string | null)[] | null | undefined,\n  entrySeparator = '_'\n): string | null | undefined {\n  if (array == null) {\n    return array;\n  }\n\n  return array.join(entrySeparator);\n}\n\n/**\n * Decodes a delimited string into javascript array. For example,\n * 'a_b' -> ['a', 'b'] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @param entrySeparator The array as a string with elements joined by the\n * entry separator\n * @return {Array} The javascript representation\n */\nexport function decodeDelimitedArray(\n  input: string | (string | null)[] | null | undefined,\n  entrySeparator = '_'\n): (string | null)[] | null | undefined {\n  const arrayStr = getEncodedValue(input, true);\n  if (arrayStr == null) return arrayStr;\n  if (arrayStr === '') return [];\n\n  return arrayStr.split(entrySeparator);\n}\n\n/**\n * Encodes a numeric array as a delimited string. (alias of encodeDelimitedArray)\n * For example, [1, 2] -> '1_2' with entrySeparator='_'\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\nexport const encodeDelimitedNumericArray = encodeDelimitedArray as (\n  array: (number | null)[] | null | undefined,\n  entrySeparator?: string\n) => string | null | undefined;\n\n/**\n * Decodes a delimited string into javascript array where all entries are numbers\n * For example, '1_2' -> [1, 2] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\nexport function decodeDelimitedNumericArray(\n  arrayStr: string | (string | null)[] | null | undefined,\n  entrySeparator = '_'\n): (number | null)[] | null | undefined {\n  const decoded = decodeDelimitedArray(arrayStr, entrySeparator);\n  if (decoded == null) return decoded;\n\n  return decoded.map((d) => (d === '' || d == null ? null : +d));\n}\n\n/**\n * Encode simple objects as readable strings. Works only for simple,\n * flat objects where values are numbers, strings.\n *\n * For example { foo: bar, boo: baz } -> \"foo-bar_boo-baz\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\nexport function encodeObject(\n  obj: { [key: string]: string | null | number | undefined } | null | undefined,\n  keyValSeparator = '-',\n  entrySeparator = '_'\n): string | null | undefined {\n  if (obj == null) return obj; // null or undefined\n  if (!Object.keys(obj).length) return ''; // {} case\n\n  return Object.keys(obj)\n    .map((key) => `${key}${keyValSeparator}${obj[key]}`)\n    .join(entrySeparator);\n}\n\n/**\n * Decodes a simple object to javascript. Currently works only for simple,\n * flat objects where values are strings.\n *\n * For example \"foo-bar_boo-baz\" -> { foo: bar, boo: baz }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\nexport function decodeObject(\n  input: string | (string | null)[] | null | undefined,\n  keyValSeparator = '-',\n  entrySeparator = '_'\n): { [key: string]: string } | null | undefined {\n  const objStr = getEncodedValue(input, true);\n  if (objStr == null) return objStr;\n  if (objStr === '') return {};\n\n  const obj: { [key: string]: string } = {};\n\n  const keyValSeparatorRegExp = new RegExp(`${keyValSeparator}(.*)`);\n  objStr.split(entrySeparator).forEach((entryStr) => {\n    const [key, value] = entryStr.split(keyValSeparatorRegExp);\n    obj[key] = value;\n  });\n\n  return obj;\n}\n\n/**\n * Encode simple objects as readable strings. Alias of encodeObject.\n *\n * For example { foo: 123, boo: 521 } -> \"foo-123_boo-521\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\nexport const encodeNumericObject = encodeObject as (\n  obj: { [key: string]: number | null | undefined } | null | undefined,\n  keyValSeparator?: string,\n  entrySeparator?: string\n) => string | null | undefined;\n\n/**\n * Decodes a simple object to javascript where all values are numbers.\n * Currently works only for simple, flat objects.\n *\n * For example \"foo-123_boo-521\" -> { foo: 123, boo: 521 }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\nexport function decodeNumericObject(\n  input: string | (string | null)[] | null | undefined,\n  keyValSeparator = '-',\n  entrySeparator = '_'\n): { [key: string]: number | null | undefined } | null | undefined {\n  const decoded: { [key: string]: string } | null | undefined = decodeObject(\n    input,\n    keyValSeparator,\n    entrySeparator\n  );\n\n  if (decoded == null) return decoded;\n\n  // convert to numbers\n  const decodedNumberObj: { [key: string]: number | null | undefined } = {};\n  for (const key of Object.keys(decoded)) {\n    decodedNumberObj[key] = decodeNumber(decoded[key]);\n  }\n\n  return decodedNumberObj;\n}\n"],
  "mappings": "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",
  "names": []
}
