{"version":3,"file":"index.js","sources":["../node_modules/kind-of/index.js","../src/types.ts","../node_modules/tiny-invariant/dist/tiny-invariant.esm.js","../src/struct-error.ts","../src/struct.ts","../src/structs/array.ts","../src/structs/dynamic.ts","../src/structs/enum.ts","../src/structs/function.ts","../src/structs/instance.ts","../src/structs/interface.ts","../src/structs/intersection.ts","../src/structs/lazy.ts","../src/structs/size.ts","../src/structs/literal.ts","../src/structs/object.ts","../src/structs/partial.ts","../src/structs/pick.ts","../src/structs/record.ts","../src/structs/scalar.ts","../src/structs/shorthand.ts","../src/structs/tuple.ts","../src/structs/union.ts","../src/superstruct.ts","../src/index.ts"],"sourcesContent":["var toString = Object.prototype.toString;\n\nmodule.exports = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol': return 'symbol';\n    case 'Promise': return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap': return 'weakmap';\n    case 'WeakSet': return 'weakset';\n    case 'Map': return 'map';\n    case 'Set': return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array': return 'int8array';\n    case 'Uint8Array': return 'uint8array';\n    case 'Uint8ClampedArray': return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array': return 'int16array';\n    case 'Uint16Array': return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array': return 'int32array';\n    case 'Uint32Array': return 'uint32array';\n    case 'Float32Array': return 'float32array';\n    case 'Float64Array': return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]': return 'object';\n    // iterators\n    case '[object Map Iterator]': return 'mapiterator';\n    case '[object Set Iterator]': return 'setiterator';\n    case '[object String Iterator]': return 'stringiterator';\n    case '[object Array Iterator]': return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return val.constructor ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function'\n    && typeof val.getDate === 'function'\n    && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string'\n    && typeof val.ignoreCase === 'boolean'\n    && typeof val.multiline === 'boolean'\n    && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function'\n    && typeof val.return === 'function'\n    && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n","import kindOf from 'kind-of'\nimport { Branch, Path, Failure } from './struct-error'\n\n/**\n * Superstruct ships by default with an unopinionated set of scalar types that\n * express all of the data types that are built-in to JavaScript.\n */\n\nexport const Types = {\n  /**\n   * Matches any value other than `undefined`.\n   *\n   * ```js\n   * 'anything'\n   * true\n   * ```\n   */\n\n  any: (value: any) => value !== undefined,\n\n  /**\n   * Matches an `arguments` object.\n   *\n   * ```js\n   * arguments\n   * ```\n   */\n\n  arguments: (value: any) => kindOf(value) === 'arguments',\n\n  /**\n   * Matches an `Array`.\n   *\n   * ```js\n   * [1, 2, 3]\n   * ```\n   */\n\n  array: (value: any) => kindOf(value) === 'array',\n\n  /**\n   * Matches a boolean.\n   *\n   * ```js\n   * true\n   * false\n   * ```\n   */\n\n  boolean: (value: any) => kindOf(value) === 'boolean',\n\n  /**\n   * Matches a Node.js `Buffer`.\n   *\n   * ```js\n   * Buffer.from('string')\n   * ```\n   */\n\n  buffer: (value: any) => kindOf(value) === 'buffer',\n\n  /**\n   * Matches a **valid** `Date` object.\n   *\n   * ```js\n   * new Date()\n   * ```\n   *\n   * Note: Invalid `Date` objects that equal `NaN` are not matched.\n   */\n\n  date: (value: any) => kindOf(value) === 'date' && !isNaN(value),\n\n  /**\n   * Matches an error object.\n   *\n   * ```js\n   * new Error()\n   * ```\n   */\n\n  error: (value: any) => kindOf(value) === 'error',\n\n  /**\n   * Matches a `Float32Array` object.\n   */\n\n  float32array: (value: any) => kindOf(value) === 'float32array',\n\n  /**\n   * Matches a `Float64Array` object.\n   */\n\n  float64array: (value: any) => kindOf(value) === 'float64array',\n\n  /**\n   * Matches a function.\n   *\n   * ```js\n   * () => {}\n   * function () {}\n   * ```\n   */\n\n  function: (value: any) => kindOf(value) === 'function',\n\n  /**\n   * Matches a generator function.\n   *\n   * ```js\n   * function* () {}\n   * ```\n   */\n\n  generatorfunction: (value: any) => kindOf(value) === 'generatorfunction',\n\n  /**\n   * Matches a `Int16Array` object.\n   */\n\n  int16array: (value: any) => kindOf(value) === 'int16array',\n\n  /**\n   * Matches a `Int32Array` object.\n   */\n\n  int32array: (value: any) => kindOf(value) === 'int32array',\n\n  /**\n   * Matches a `Int8Array` object.\n   */\n\n  int8array: (value: any) => kindOf(value) === 'int8array',\n\n  /**\n   * Matches a `Map` object.\n   *\n   * ```js\n   * new Map()\n   * ```\n   */\n\n  map: (value: any) => kindOf(value) === 'map',\n\n  /**\n   * Matches the `null` literal value.\n   *\n   * ```js\n   * null\n   * ```\n   */\n\n  null: (value: any) => kindOf(value) === 'null',\n\n  /**\n   * Matches a number.\n   *\n   * ```js\n   * 42\n   * ```\n   */\n\n  number: (value: any) => kindOf(value) === 'number',\n\n  /**\n   * Matches a plain object.\n   *\n   * ```js\n   * { key: 'value' }\n   * { something: true }\n   * ```\n   */\n\n  object: (value: any) => kindOf(value) === 'object',\n\n  /**\n   * Matches a `Promise` object.\n   *\n   * ```js\n   * Promise.resolve()\n   * ```\n   */\n\n  promise: (value: any) => kindOf(value) === 'promise',\n\n  /**\n   * Matches a regular expression object.\n   *\n   * ```js\n   * /a-z/g\n   * ```\n   */\n\n  regexp: (value: any) => kindOf(value) === 'regexp',\n\n  /**\n   * Matches a `Set` object.\n   *\n   * ```js\n   * new Set()\n   * ```\n   */\n\n  set: (value: any) => kindOf(value) === 'set',\n\n  /**\n   * Matches a string.\n   *\n   * ```js\n   * 'text'\n   * ```\n   */\n\n  string: (value: any) => kindOf(value) === 'string',\n\n  /**\n   * Matches a `Symbol`.\n   *\n   * ```js\n   * Symbol()\n   * ```\n   */\n\n  symbol: (value: any) => kindOf(value) === 'symbol',\n\n  /**\n   * Matches a `Uint16Array` object.\n   */\n\n  uint16array: (value: any) => kindOf(value) === 'uint16array',\n\n  /**\n   * Matches a `Uint32Array` object.\n   */\n\n  uint32array: (value: any) => kindOf(value) === 'uint32array',\n\n  /**\n   * Matches a `Uint8Array` object.\n   */\n\n  uint8array: (value: any) => kindOf(value) === 'uint8array',\n\n  /**\n   * Matches a `Uint8ClampedArray` object.\n   */\n\n  uint8clampedarray: (value: any) => kindOf(value) === 'uint8clampedarray',\n\n  /**\n   * Matches the `undefined` literal value.\n   *\n   * ```js\n   * undefined\n   * ```\n   */\n\n  undefined: (value: any) => kindOf(value) === 'undefined',\n\n  /**\n   * Matches a `WeakMap` object.\n   *\n   * ```js\n   * new WeakMap()\n   * ```\n   */\n\n  weakmap: (value: any) => kindOf(value) === 'weakmap',\n\n  /**\n   * Matches a `WeakSet` object.\n   *\n   * ```js\n   * new WeakSet()\n   * ```\n   */\n\n  weakset: (value: any) => kindOf(value) === 'weakset',\n}\n\n/**\n * `Validator` functions allow developers to define their own scalar types for\n * Superstruct to validate against, and return an indication of what is invalid.\n *\n * ```js\n * import { superstruct } from 'superstruct'\n * import isEmail from 'is-email'\n *\n * const struct = superstruct({\n *   types: {\n *     email: value => isEmail(value) && value.length < 256,\n *   }\n * })\n * ```\n */\n\nexport type Validator = (\n  value: any,\n  branch: Branch,\n  path: Path\n) => Partial<Failure>[] | Partial<Failure> | boolean\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n\n  if (isProduction) {\n    throw new Error(prefix);\n  } else {\n    throw new Error(prefix + \": \" + (message || ''));\n  }\n}\n\nexport default invariant;\n","import invariant from 'tiny-invariant'\n\n/**\n * `StructError` objects are thrown (or returned) by Superstruct when its\n * validation fails. The error represents the first error encountered during\n * validation. But they also have an `error.failures` property that holds\n * information for all of the failures encountered.\n */\n\nexport class StructError extends TypeError {\n  branch: Branch\n  failures: Failure[]\n  path: Path\n  type: string | undefined\n  value: any\n  [key: string]: any\n\n  constructor(failures: Failure[]) {\n    invariant(\n      failures.length > 0,\n      `StructError requires being passed a failure, but received: ${failures}`\n    )\n\n    const [first] = failures\n    const { path, value, type, branch, ...rest } = first\n    const message = `Expected a value of type \\`${type}\\`${\n      path.length ? ` for \\`${path.join('.')}\\`` : ''\n    } but received \\`${JSON.stringify(value)}\\`.`\n\n    super(message)\n    this.type = type\n    this.value = value\n    Object.assign(this, rest)\n    this.path = path\n    this.branch = branch\n    this.failures = failures\n    this.stack = new Error().stack\n    ;(this as any).__proto__ = StructError.prototype\n  }\n}\n\n/**\n * `Path` arrays specify a nested value's location in a root object or array.\n *\n * ```js\n * ['user', 'address', 'city']\n * ['nodes', 1, 'nodes', 0, 'text']\n * ```\n */\n\nexport type Path = Array<number | string>\n\n/**\n * `Branch` arrays contain each value following a path down from the root.\n *\n * ```js\n * [root, ..., parent, value]\n * ```\n */\n\nexport type Branch = Array<any>\n\n/**\n * `Failure` objects represent a specific failure in validation. They are plain\n * objects that can be turned into real `StructError` when needed.\n *\n * ```js\n * {\n *   type: 'number',\n *   value: 'invalid',\n *   path: [1],\n *   branch: [\n *     [1, 'invalid', 2],\n *     'invalid',\n *   ]\n * }\n */\n\nexport type Failure = {\n  /**\n   * The branch of values following a path down from the root.\n   */\n\n  branch: Branch\n\n  /**\n   * The path of indices to retrieve the failing value from the root.\n   */\n\n  path: Path\n\n  /**\n   * The failing value.\n   */\n\n  value: any\n\n  /**\n   * The expected type description of the failing value, or `undefined` if it\n   * didn't have an expected type.\n   */\n\n  type: string | undefined\n\n  /**\n   * Failures can also be augmented with any of your on custom properties.\n   */\n\n  [key: string]: any\n}\n","import { Failure, Branch, Path } from './struct-error'\nimport { Superstruct } from './superstruct'\n\n/**\n * A symbol to set on `Struct` objects to test them against later.\n */\n\nexport const STRUCT = Symbol('STRUCT')\n\n/**\n * Check if a value is a `Struct` object.\n */\n\nexport const isStruct = (value: any): value is Struct => {\n  return typeof value === 'function' && value[STRUCT]\n}\n\n/**\n * This abstract `Struct` factory creates a generic struct that validates values\n * against a `Validator` function.\n */\n\nexport const createStruct = (props: {\n  kind: string\n  type: string\n  defaults: () => any\n  struct: Superstruct\n}): Struct => {\n  const { struct } = props\n  const { Error } = struct\n  const Struct = (value: any): any => Struct.assert(value)\n\n  // Set a hidden symbol property so that we can check it later to see if an\n  // object is a struct object.\n  Object.defineProperty(Struct, STRUCT, { value: true })\n\n  Struct.kind = props.kind\n  Struct.type = props.type\n\n  Struct.default = () => {\n    return typeof props.defaults === 'function'\n      ? props.defaults()\n      : props.defaults\n  }\n\n  Struct.test = (value: any): boolean => {\n    const [failures] = Struct.check(value, [value], [])\n    return !failures\n  }\n\n  Struct.assert = (value: any): any => {\n    const [failures, result] = Struct.check(value, [value], [])\n\n    if (failures) {\n      throw new Error(failures)\n    } else {\n      return result\n    }\n  }\n\n  Struct.validate = (value: any): [Error?, any?] => {\n    const [failures, result] = Struct.check(value, [value], [])\n\n    if (failures) {\n      return [new Error(failures)]\n    } else {\n      return [undefined, result]\n    }\n  }\n\n  Struct.check = (\n    value: any = Struct.default(),\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    const failures = [Struct.fail({ value, branch, path })]\n    return [failures]\n  }\n\n  Struct.fail = (obj: {\n    value: any\n    branch: Branch\n    path: Path\n    type?: string\n  }): Failure => {\n    return { ...obj, type: 'type' in obj ? obj.type : Struct.type }\n  }\n\n  return Struct\n}\n\n/**\n * `Struct` validators encapsulate the validation logic for a specific type of\n * data (either custom or built-in). They have a set of methods that allow you\n * to validate input in various ways, while producing detailed errors.\n *\n * They are created by the [[Superstruct]] factory functions. You can call them\n * directly for the simple case, or use one of their validation methods.\n *\n * ```js\n * const Struct = struct({\n *   id: 'number',\n *   name: 'string',\n * })\n *\n * const result = Struct(data) // Throws if invalid!\n *\n * const [error, result] = Struct.validate(data)\n *\n * if (Struct.test(data)) {\n *    // ...\n * }\n * ```\n */\n\nexport interface Struct {\n  /**\n   * All structs are functions that are shorthand for calling [[Struct.assert]].\n   */\n\n  (value: any): any\n\n  /**\n   * The struct's name.\n   *\n   * ```js\n   * 'object'\n   * 'union'\n   * 'email'\n   * ```\n   */\n\n  kind: string\n\n  /**\n   * A string representing the type of the struct. These strings are purely for\n   * user-facing error messages, and aren't canonical. They are similar to the\n   * syntax that TypeScript uses.\n   *\n   * ```js\n   * '{id,name,email}'\n   * 'string | number'\n   * 'email'\n   * ```\n   */\n\n  type: string\n\n  /**\n   * Get the default value for a struct.\n   *\n   * ```js\n   * const defaults = Struct.default()\n   * ```\n   */\n\n  default(): any\n\n  /**\n   * Run the low-level validation function a struct, returning a tuple that\n   * contains either a list of [[Failure]] objects, or a resulting value.\n   *\n   * This method is fairly low-level and not for normal use.\n   *\n   * ```js\n   * const [failures, result] = Struct.check(value, branch, path)\n   * ```\n   */\n\n  check(value: any, branch: Branch, path: Path): [Failure[]?, any?]\n\n  /**\n   * Validate a `value`, returning the resulting value, and throwing an error if\n   * validation fails.\n   *\n   * ```js\n   * try {\n   *   const result = Struct.assert(value)\n   *   // ...\n   * } catch (e) {\n   *   // ...\n   * }\n   * ```\n   */\n\n  assert(value: any): any\n\n  /**\n   * Validate a `value`, returning a boolean indicating whether it's valid.\n   *\n   * Note: Using this method does not give you access to the defaults that may\n   * be associated with a struct, so it doesn't guarantee that the value you\n   * have passes, just that the value with defaults passes.\n   *\n   * ```js\n   * if (Struct.test(value)) {\n   *   // ...\n   * }\n   * ```\n   */\n\n  test(value: any): boolean\n\n  /**\n   * Validate a `value` returning a tuple containing an error if the validation\n   * fails, or the resulting value if it succeeds.\n   *\n   * ```js\n   * const [error, result] = Struct.validate(value)\n   * ```\n   */\n\n  validate(value: any): [Error?, any?]\n\n  /**\n   * Create a low-level [[Failure]] object for the struct.\n   *\n   * ```js\n   * const failure = Struct.fail({ value, branch, path })\n   * ```\n   */\n\n  fail(obj: { value: any; branch: Branch; path: Path; type?: string }): Failure\n}\n","import invariant from 'tiny-invariant'\nimport { Branch, Failure, Path, Struct, Superstruct } from '..'\nimport { createStruct } from '../struct'\n\nexport const createArray = (\n  schema: [any],\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    Array.isArray(schema) && schema.length === 1,\n    `Array structs must be defined as an array with one element, but you passed: ${schema}`\n  )\n\n  const Element = struct(schema[0], undefined)\n  const Struct = createStruct({\n    kind: 'array',\n    type: `${Element.type}[]`,\n    defaults,\n    struct,\n  })\n\n  Struct.check = (\n    value: any = Struct.default(),\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    if (!Array.isArray(value)) {\n      return [[Struct.fail({ value, branch, path })]]\n    }\n\n    const result = []\n    const failures: Failure[] = []\n\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i]\n      const [efs, er] = Element.check(v, branch.concat(v), path.concat(i))\n\n      if (efs) {\n        failures.push(...efs)\n        continue\n      }\n\n      result[i] = er\n    }\n\n    return failures.length ? [failures] : [undefined, result]\n  }\n\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport { Branch, Failure, Path, Struct, Superstruct } from '..'\nimport { createStruct } from '../struct'\n\nexport const createDynamic = (\n  schema: (value: any, branch: Branch, path: Path) => Struct,\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    typeof schema === 'function',\n    `Dynamic structs must be defined as a function, but you passed: ${schema}`\n  )\n\n  const Dynamic = createStruct({\n    kind: 'dynamic',\n    type: `dynamic<…>`,\n    defaults,\n    struct,\n  })\n\n  Dynamic.check = (\n    value: any = Dynamic.default(),\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    const Struct = schema(value, branch, path)\n    return Struct.check(value, branch, path)\n  }\n\n  return Dynamic\n}\n","import invariant from 'tiny-invariant'\nimport { Struct, Superstruct } from '..'\n\nexport const createEnum = (\n  schema: any[],\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    Array.isArray(schema),\n    `Enum structs must be defined as an array, but you passed: ${schema}`\n  )\n\n  const validator = (value: any) => schema.includes(value)\n  const Struct = struct(validator, defaults)\n  Struct.kind = 'enum'\n  Struct.type = schema\n    .map(s => (typeof s === 'string' ? `\"${s}\"` : `${s}`))\n    .join(' | ')\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport { Branch, Failure, Path, Struct, Superstruct, Validator } from '..'\nimport { createStruct } from '../struct'\n\nexport const createFunction = (\n  schema: Validator,\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  const Struct = createStruct({\n    kind: 'function',\n    type: `function<…>`,\n    defaults,\n    struct,\n  })\n\n  Struct.check = (\n    value: any = Struct.default(),\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    const result = schema(value, branch, path)\n\n    if (result === true) {\n      return [undefined, value]\n    }\n\n    const failures: Failure[] = []\n\n    if (result === false) {\n      failures.push(Struct.fail({ value, branch, path }))\n    } else if (Array.isArray(result) && result.length > 0) {\n      for (const r of result) {\n        failures.push(Struct.fail({ value, branch, path, ...r }))\n      }\n    } else if (typeof result === 'object') {\n      failures.push(Struct.fail({ value, branch, path, ...result }))\n    } else {\n      invariant(\n        false,\n        `Validator functions must return a boolean, a failure object, or an array of failure objects, but you passed: ${result}`\n      )\n    }\n\n    return [failures]\n  }\n\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport { Struct, Superstruct } from '..'\n\nexport const createInstance = (\n  schema: any,\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    typeof schema === 'function',\n    `Instance structs must be defined as a function, but you passed: ${schema}`\n  )\n\n  const validator = (value: any) => value instanceof schema\n  const Struct = struct(validator, defaults)\n  Struct.kind = 'instance'\n  Struct.type = `instance<${schema.name}>`\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport { Branch, Failure, Path, Struct, Superstruct } from '..'\nimport { createStruct } from '../struct'\n\nexport const createInterface = (\n  schema: any,\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    typeof schema === 'object',\n    `Interface structs must be defined as an object, but you passed: ${schema}`\n  )\n\n  const Props: Record<string, Struct> = {}\n\n  for (const key in schema) {\n    Props[key] = struct(schema[key])\n  }\n\n  const Struct = createStruct({\n    kind: 'interface',\n    type: `interface<{${Object.keys(schema).join()}}>`,\n    defaults,\n    struct,\n  })\n\n  Struct.check = (\n    value: any = Struct.default(),\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    if (typeof value !== 'object' && typeof value !== 'function') {\n      return [[Struct.fail({ value, branch, path })]]\n    }\n\n    const failures: Failure[] = []\n\n    for (const k in Props) {\n      const Prop = Props[k]\n      const v = value[k]\n      const [pfs] = Prop.check(v, branch.concat(v), path.concat(k))\n\n      if (pfs) {\n        failures.push(...pfs)\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, value]\n  }\n\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport { Branch, Failure, Path, Struct, Superstruct } from '..'\nimport { createStruct } from '../struct'\n\nexport const createIntersection = (\n  schema: any[],\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    Array.isArray(schema) && schema.length !== 0,\n    `Intersection structs must be defined as a non-empty array, but you passed: ${schema}`\n  )\n\n  const Structs = schema.map(sch => struct(sch))\n  const type = Structs.map(s => s.type).join(' & ')\n  const Struct = createStruct({\n    kind: 'intersection',\n    type,\n    defaults,\n    struct,\n  })\n\n  Struct.check = (\n    value: any = Struct.default(),\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    let result: any = value\n\n    for (const struct of Structs) {\n      const [fs, v] = struct.check(value, branch, path)\n\n      if (fs) {\n        return [[Struct.fail({ value, branch, path })]]\n      } else {\n        result = v\n      }\n    }\n\n    return [undefined, result]\n  }\n\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport { Failure, Struct, Superstruct } from '..'\nimport { createStruct } from '../struct'\n\nexport const createLazy = (\n  schema: () => Struct,\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    typeof schema === 'function',\n    `Lazy structs must be defined as a function, but you passed: ${schema}`\n  )\n\n  const Lazy = createStruct({\n    kind: 'lazy',\n    type: `lazy<…>`,\n    defaults,\n    struct,\n  })\n\n  Lazy.check = (...args): [Failure[]?, any?] => {\n    Object.assign(Lazy, schema())\n    return Lazy.check(...args)\n  }\n\n  return Lazy\n}\n","import invariant from 'tiny-invariant'\nimport { Struct, Superstruct } from '..'\n\nexport const createSize = (\n  schema: [number, number],\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    Array.isArray(schema) &&\n      schema.length === 2 &&\n      schema.every(n => typeof n === 'number'),\n    `Size structs must be defined as an array with two number elements, but you passed: ${schema}`\n  )\n\n  const [min, max] = schema\n  const validator = (value: any) =>\n    value != null &&\n    typeof value.length === 'number' &&\n    value.length >= min &&\n    value.length <= max\n\n  const Struct = struct(validator, defaults)\n  Struct.kind = 'size'\n  Struct.type = `size<${min},${max}>`\n  return Struct\n}\n","import { Struct, Superstruct } from '..'\n\nexport const createLiteral = (\n  schema: any,\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  const validator = (value: any) => value === schema\n  const Struct = struct(validator, defaults)\n  Struct.kind = 'literal'\n  Struct.type = typeof schema === 'string' ? `\"${schema}\"` : `${schema}`\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport kindOf from 'kind-of'\nimport { Branch, Failure, Path, Struct, Superstruct } from '..'\nimport { createStruct } from '../struct'\n\nexport const createObject = (\n  schema: {},\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    typeof schema === 'object',\n    `Object structs must be defined as an object, but you passed: ${schema}`\n  )\n\n  const Props: Record<string, Struct> = {}\n\n  for (const key in schema) {\n    Props[key] = struct(schema[key])\n  }\n\n  const Struct = createStruct({\n    kind: 'object',\n    type: `{${Object.keys(schema).join()}}`,\n    defaults,\n    struct,\n  })\n\n  Struct.check = (\n    value: any = Struct.default(),\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    const d = Struct.default()\n\n    if (value === undefined) {\n      value = d\n    }\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({ value, branch, path })]]\n    }\n\n    const result = {}\n    const failures: Failure[] = []\n    const keys = new Set(Object.keys(Props).concat(Object.keys(value)))\n\n    for (const k of keys) {\n      let v = value[k]\n      const p = path.concat(k)\n      const b = branch.concat(v)\n      const Prop = Props[k]\n\n      if (v === undefined && d != null && k in d) {\n        v = typeof d[k] === 'function' ? d[k](value, branch, path) : d[k]\n      }\n\n      if (!(k in Props)) {\n        failures.push(\n          Struct.fail({\n            type: undefined,\n            value: v,\n            path: p,\n            branch: value,\n          })\n        )\n\n        continue\n      }\n\n      const [pfs, pr] = Prop.check(v, b, p)\n\n      if (pfs) {\n        failures.push(...pfs)\n      } else if (pr !== undefined && k in Props) {\n        result[k] = pr\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result]\n  }\n\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport kindOf from 'kind-of'\nimport { Branch, Failure, Path, Struct, Superstruct } from '..'\nimport { createStruct } from '../struct'\n\nexport const createPartial = (\n  schema: {},\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    typeof schema === 'object',\n    `Partial structs must be defined as an object, but you passed: ${schema}`\n  )\n\n  const Props: Record<string, Struct> = {}\n\n  for (const key in schema) {\n    Props[key] = struct.union([schema[key], 'undefined'])\n  }\n\n  const Struct = createStruct({\n    kind: 'object',\n    type: `{${Object.keys(schema).join()}}`,\n    defaults,\n    struct,\n  })\n\n  Struct.check = (\n    value: any = Struct.default(),\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    const d = Struct.default()\n\n    if (value === undefined) {\n      value = d\n    }\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({ value, branch, path })]]\n    }\n\n    const result = {}\n    const failures: Failure[] = []\n\n    for (const k of value) {\n      let v = value[k]\n      const p = path.concat(k)\n      const b = branch.concat(v)\n      const Prop = Props[k]\n\n      if (v === undefined && d != null && k in d) {\n        v = typeof d[k] === 'function' ? d[k](value, branch, path) : d[k]\n      }\n\n      if (!(k in Props)) {\n        failures.push(\n          Struct.fail({\n            type: undefined,\n            value: v,\n            path: p,\n            branch: value,\n          })\n        )\n\n        continue\n      }\n\n      const [pfs, pr] = Prop.check(v, b, p)\n\n      if (pfs) {\n        failures.push(...pfs)\n      } else if (pr !== undefined && k in Props) {\n        result[k] = pr\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result]\n  }\n\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport kindOf from 'kind-of'\nimport { Branch, Failure, Path, Struct, Superstruct } from '..'\nimport { createStruct } from '../struct'\n\nexport const createPick = (\n  schema: {},\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    typeof schema === 'object',\n    `Pick structs must be defined as an object, but you passed: ${schema}`\n  )\n\n  const Props: Record<string, Struct> = {}\n\n  for (const key in schema) {\n    Props[key] = struct(schema[key])\n  }\n\n  const Struct = createStruct({\n    kind: 'pick',\n    type: `pick<{${Object.keys(schema).join()}}>`,\n    defaults,\n    struct,\n  })\n\n  Struct.check = (\n    value: any = Struct.default(),\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    const d = Struct.default()\n\n    if (value === undefined) {\n      value = d\n    }\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({ value, branch, path })]]\n    }\n\n    const result = {}\n    const failures: Failure[] = []\n\n    for (const k in Props) {\n      let v = value[k]\n      const p = path.concat(k)\n      const b = branch.concat(v)\n      const Prop = Props[k]\n\n      if (v === undefined && d != null && k in d) {\n        v = typeof d[k] === 'function' ? d[k](value, branch, path) : d[k]\n      }\n\n      const [pfs, pr] = Prop.check(v, b, p)\n\n      if (pfs) {\n        failures.push(...pfs)\n      } else if (pr !== undefined && k in Props) {\n        result[k] = pr\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result]\n  }\n\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport kindOf from 'kind-of'\nimport { Branch, Failure, Path, Struct, Superstruct } from '..'\nimport { createStruct } from '../struct'\n\nexport const createRecord = (\n  schema: [any, any],\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    Array.isArray(schema) && schema.length === 2,\n    `Record structs must be defined as an array with two elements, but you passed: ${schema}`\n  )\n\n  const Key = struct(schema[0])\n  const Value = struct(schema[1])\n  const Struct = createStruct({\n    kind: 'record',\n    type: `record<${Key.type},${Value.type}>`,\n    defaults,\n    struct,\n  })\n\n  Struct.check = (\n    value: any,\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    // Record structs have a special default handling behavior, where the defaults\n    // are for the entries themselves, not for the entire value. So we can't use\n    // JavaScript's built-in default handling here.\n    const defs = Struct.default()\n    value = defs ? { ...defs, ...value } : value\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({ value, branch, path })]]\n    }\n\n    const result = {}\n    const failures: Failure[] = []\n\n    for (let k in value) {\n      const v = value[k]\n      const p = path.concat(k)\n      const b = branch.concat(v)\n      const [kfs, kr] = Key.check(k, b, p)\n\n      if (kfs) {\n        failures.push(...kfs)\n      } else {\n        const [vfs, vr] = Value.check(v, b, p)\n\n        if (vfs) {\n          failures.push(...vfs)\n        } else {\n          result[kr] = vr\n        }\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result]\n  }\n\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport { Struct, Superstruct } from '..'\n\nexport const createScalar = (\n  schema: string,\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    typeof schema === 'string',\n    `Scalar structs must be defined as a string, but you passed: ${schema}`\n  )\n\n  const { Types } = struct\n\n  invariant(\n    schema in Types,\n    `No struct validator function found for type \"${schema}\".`\n  )\n\n  const Struct = struct(Types[schema], defaults)\n  Struct.kind = 'scalar'\n  Struct.type = schema\n  return Struct\n}\n","import { isStruct, Struct, Superstruct } from '..'\n\nexport const createShorthand = (\n  schema: any,\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  if (isStruct(schema)) {\n    return schema\n  }\n\n  if (Array.isArray(schema)) {\n    if (schema.length === 1) {\n      const [first] = schema\n      return struct.array([first], defaults)\n    } else if (schema.length > 1) {\n      return struct.tuple(schema, defaults)\n    }\n  }\n\n  if (typeof schema === 'function') {\n    return struct.function(schema, defaults)\n  }\n\n  if (typeof schema === 'object') {\n    return struct.object(schema, defaults)\n  }\n\n  if (typeof schema === 'string') {\n    let optional = false\n    let Struct\n\n    if (schema.endsWith('?')) {\n      optional = true\n      schema = schema.slice(0, -1)\n    }\n\n    if (schema.includes('|')) {\n      const scalars = schema.split(/\\s*\\|\\s*/g)\n      Struct = struct.union(scalars, defaults)\n    } else if (schema.includes('&')) {\n      const scalars = schema.split(/\\s*&\\s*/g)\n      Struct = struct.intersection(scalars, defaults)\n    } else {\n      Struct = struct.scalar(schema, defaults)\n    }\n\n    if (optional) {\n      Struct = struct.union([Struct, 'undefined'], undefined)\n    }\n\n    return Struct\n  }\n\n  throw new Error(\n    `A schema definition must be an object, array, string or function, but you passed: ${schema}`\n  )\n}\n","import invariant from 'tiny-invariant'\nimport { Branch, Failure, Path, Struct, Superstruct } from '..'\nimport { createStruct } from '../struct'\n\nexport const createTuple = (\n  schema: any[],\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    Array.isArray(schema),\n    `Tuple structs must be defined as an array, but you passed: ${schema}`\n  )\n\n  const Elements = schema.map(s => struct(s))\n  const Struct = createStruct({\n    kind: 'tuple',\n    type: `[${Elements.map(S => S.type).join()}]`,\n    defaults,\n    struct,\n  })\n\n  Struct.check = (\n    value: any = Struct.default(),\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    if (!Array.isArray(value)) {\n      return [[Struct.fail({ value, branch, path })]]\n    }\n\n    const result = []\n    const failures: Failure[] = []\n    const length = Math.max(value.length, Elements.length)\n\n    for (let i = 0; i < length; i++) {\n      const Element = Elements[i]\n      const v = value[i]\n      const p = path.concat(i)\n      const b = branch.concat(v)\n\n      if (!Element) {\n        failures.push(\n          Struct.fail({ type: undefined, value: v, path: p, branch: b })\n        )\n      } else {\n        const [efs, er] = Element.check(v, b, p)\n\n        if (efs) {\n          failures.push(...efs)\n        } else {\n          result[i] = er\n        }\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result]\n  }\n\n  return Struct\n}\n","import invariant from 'tiny-invariant'\nimport { createStruct } from '../struct'\nimport { Branch, Failure, Path, Struct, Superstruct } from '..'\n\nexport const createUnion = (\n  schema: any[],\n  defaults: any,\n  struct: Superstruct\n): Struct => {\n  invariant(\n    Array.isArray(schema) && schema.length !== 0,\n    `Union structs must be defined as a non-empty array, but you passed: ${schema}`\n  )\n\n  const Structs = schema.map(sch => struct(sch))\n  const type = Structs.map(s => s.type).join(' | ')\n  const Struct = createStruct({\n    kind: 'union',\n    type,\n    defaults,\n    struct,\n  })\n\n  Struct.check = (\n    value: any = Struct.default(),\n    branch: Branch,\n    path: Path\n  ): [Failure[]?, any?] => {\n    for (const struct of Structs) {\n      const [fs, v] = struct.check(value, branch, path)\n\n      if (!fs) {\n        return [undefined, v]\n      }\n    }\n\n    return [[Struct.fail({ value, branch, path })]]\n  }\n\n  return Struct\n}\n","import { Validator, Types as BuiltinTypes } from './types'\nimport { Branch, Failure, Path, StructError } from './struct-error'\nimport { Struct } from './struct'\nimport {\n  createArray,\n  createDynamic,\n  createEnum,\n  createFunction,\n  createInstance,\n  createInterface,\n  createIntersection,\n  createLazy,\n  createLiteral,\n  createObject,\n  createPartial,\n  createPick,\n  createRecord,\n  createScalar,\n  createShorthand,\n  createSize,\n  createTuple,\n  createUnion,\n} from './structs'\n\n/**\n * `SuperstructSettings` are passed in when creating a `Superstruct` factory.\n */\n\nexport type SuperstructSettings = {\n  types: Record<string, Validator>\n  error: { new (failures: Failure[]): Error }\n}\n\n/**\n * Create a struct singleton with settings that include your own domain-specific\n * data `types`, and an optional custom `Error` class.\n */\n\nexport const superstruct = (\n  settings: Partial<SuperstructSettings> = {}\n): Superstruct => {\n  const struct = (schema: any, defaults?: any): Struct => {\n    return createShorthand(schema, defaults, struct)\n  }\n\n  struct.array = (schema: [any], defaults?: any): Struct => {\n    return createArray(schema, defaults, struct)\n  }\n\n  struct.dynamic = (\n    schema: (value: any, branch: Branch, path: Path) => Struct,\n    defaults?: any\n  ): Struct => {\n    return createDynamic(schema, defaults, struct)\n  }\n\n  struct.enum = (schema: any[], defaults?: any): Struct => {\n    return createEnum(schema, defaults, struct)\n  }\n\n  struct.function = (schema: Validator, defaults?: any): Struct => {\n    return createFunction(schema, defaults, struct)\n  }\n\n  struct.instance = (schema: any, defaults?: any): Struct => {\n    return createInstance(schema, defaults, struct)\n  }\n\n  struct.interface = (schema: any, defaults?: any): Struct => {\n    return createInterface(schema, defaults, struct)\n  }\n\n  struct.intersection = (schema: any[], defaults?: any): Struct => {\n    return createIntersection(schema, defaults, struct)\n  }\n\n  struct.lazy = (schema: () => Struct, defaults?: any): Struct => {\n    return createLazy(schema, defaults, struct)\n  }\n\n  struct.literal = (schema: any, defaults?: any): Struct => {\n    return createLiteral(schema, defaults, struct)\n  }\n\n  struct.object = (schema: {}, defaults?: any): Struct => {\n    return createObject(schema, defaults, struct)\n  }\n\n  struct.optional = (schema: any, defaults?: any): Struct => {\n    return createUnion([schema, 'undefined'], defaults, struct)\n  }\n\n  struct.partial = (schema: {}, defaults?: any): Struct => {\n    return createPartial(schema, defaults, struct)\n  }\n\n  struct.pick = (schema: {}, defaults?: any): Struct => {\n    return createPick(schema, defaults, struct)\n  }\n\n  struct.record = (schema: [any, any], defaults?: any): Struct => {\n    return createRecord(schema, defaults, struct)\n  }\n\n  struct.scalar = (schema: string, defaults?: any): Struct => {\n    return createScalar(schema, defaults, struct)\n  }\n\n  struct.size = (schema: [number, number], defaults?: any): Struct => {\n    return createSize(schema, defaults, struct)\n  }\n\n  struct.tuple = (schema: any[], defaults?: any): Struct => {\n    return createTuple(schema, defaults, struct)\n  }\n\n  struct.union = (schema: any[], defaults?: any): Struct => {\n    return createUnion(schema, defaults, struct)\n  }\n\n  struct.Error = settings.error || StructError\n  struct.Types = { ...BuiltinTypes, ...settings.types }\n  return struct\n}\n\n/**\n * `Superstruct` factories create different kinds of [[Struct]] validators, and\n * encapsulate the user-defined data types.\n *\n * The [[struct]] export is a factory that ships with Superstruct by default,\n * pre-configured with all of the built-in JavaScript data types. It's the\n * easiest way to quickly define structs:\n *\n * ```js\n * import { struct } from 'superstruct'\n *\n * const User = struct({\n *   id: 'number',\n *   name: 'string',\n * })\n * ```\n *\n * If you need to define custom data types, you can define your own by using\n * the [[superstruct]] export:\n *\n * ```js\n * import { superstruct } from 'superstruct'\n * import isEmail from 'is-email'\n * import isUrl from 'is-url'\n *\n * const struct = superstruct({\n *   types: {\n *     email: value => isEmail(value) && value.length < 256,\n *     url: value => isUrl(value) && value.length < 2048,\n *   }\n * })\n *\n * const User = struct({\n *   id: 'number',\n *   name: 'string',\n *   email: 'email',\n *   website: 'url?',\n * })\n * ```\n *\n * This way you can easily define structs that contain types like `'email'`,\n * `'url'`, or whatever else your application may need.\n */\n\nexport interface Superstruct {\n  /**\n   * Structs are defined by passing a schema definition to the struct factory.\n   * The schema definition can be a string, array, object or function. They can\n   * also be composed by nesting structs inside each other.\n   *\n   * The default struct factory allows you to write structs using a shorthand\n   * syntax for the most common cases—arrays, objects, scalars, tuples, etc.\n   *\n   * ```js\n   * struct('string') // Scalars\n   * struct(['number']) // Arrays\n   * struct({ name: 'string' }) // Objects\n   * struct(['error', 'string']) // Tuples\n   * struct('number?') // Optional\n   * struct('string & email') // Intersection\n   * struct('number | string') // Union\n   * struct(value => true || false) // Function\n   * struct(Struct) // Pass-through\n   * ```\n   *\n   * Each shorthand is equivalent to a method on the [[Superstruct]] factory:\n   *\n   * ```js\n   * // These are equivalent...\n   * struct(['number'])\n   * struct.array(['number'])\n   *\n   * struct('string & email')\n   * struct.union(['string', 'email'])\n   * ```\n   *\n   * And each one can use your custom types, or even other structs:\n   *\n   * ```js\n   * struct('email')\n   * struct(User)\n   * ```\n   *\n   * The second argument to struct factories is always a `defaults` value. It\n   * can either be the default itself or a function that returns the default.\n   *\n   * ```js\n   * struct('id', uuid.v4)\n   *\n   * struct({\n   *   id: 'number',\n   *   name: 'string',\n   *   is_admin: 'boolean?',\n   * }, {\n   *   is_admin: false,\n   * })\n   * ```\n   */\n\n  (schema: any, defaults?: any): Struct\n\n  /**\n   * Array structs validate that their input is an array with elements that\n   * match a specific struct. You can also pass the `max` or `min` options to\n   * validate the length of the array.\n   *\n   * ```js\n   * const Struct = struct.array(['number'])\n   *\n   * Struct([1, 2, 3])\n   * ```\n   *\n   * They are similar to the `Array` type in TypeScript.\n   */\n\n  array(schema: [any], defaults?: any): Struct\n\n  /**\n   * Dynamic structs are defined by a function that is passed the value being\n   * validated, and they determine which struct to use at runtime.\n   *\n   * ```js\n   * const Struct = struct.dynamic(value => StructA || StructB)\n   * ```\n   *\n   * They are inhernetly less performant that compile-time structs, but they\n   * unlock a set of possibilities that aren't possible at compile time alone.\n   */\n\n  dynamic(\n    schema: (value: any, branch: Branch, path: Path) => Struct,\n    defaults?: any\n  ): Struct\n\n  /**\n   * Enum structs validate that their input is one of a set of values.\n   *\n   * ```js\n   * const Struct = struct.enum(['fruit', 'vegetable', 'meat'])\n   *\n   * Struct('fruit')\n   * ```\n   *\n   * They are similar to the `enum` type in TypeScript.\n   */\n\n  enum(schema: any[], defaults?: any): Struct\n\n  /**\n   * Function structs validate their input against a one-off validator function.\n   *\n   * ```js\n   * const Struct = struct.function(value => typeof value === 'string')\n   *\n   * Struct('a simple string')\n   * ```\n   *\n   * They can't provide as detailed of errors as other struct types, but they do\n   * allow for customization for easy one-off cases.\n   */\n\n  function(schema: Validator, defaults?: any): Struct\n\n  /**\n   * Instance structs validate that their input is an instance of a class.\n   *\n   * ```js\n   * const Struct = struct.instance(MyClass)\n   *\n   * Struct(new MyClass())\n   * ```\n   */\n\n  instance(schema: any, defaults?: any): Struct\n\n  /**\n   * Interface structs validate that their input matches an interface defined as\n   * a set of properties with associated types.\n   *\n   * ```js\n   * const Struct = struct.interface({\n   *   length: 'number',\n   *   indexOf: 'function',\n   * })\n   *\n   * Struct([1, 2, 3])\n   * Struct('abc')\n   * ```\n   *\n   * They are similar to the structural-typing granted by TypeScript.\n   */\n\n  interface(schema: any, defaults?: any): Struct\n\n  /**\n   * Intersection structs validate that their input matches **all** of a set of\n   * different structs.\n   *\n   * ```js\n   * const Struct = struct.intersection('string & email')\n   *\n   * Struct('jane@example.com')\n   * ```\n   *\n   * Note: The structs will be validated in order, so validators on the right\n   * can rely on the validators before them having passed.\n   *\n   * They are similar to the `&` operator in TypeScript.\n   */\n\n  intersection(schema: any[], defaults?: any): Struct\n\n  /**\n   * Lazy structs allow you to initialize a struct lazily, only initializing it\n   * once on the first time it attempts to be validated.\n   *\n   * ```js\n   * const Struct = struct({\n   *   nodes: struct.lazy(() => Struct)\n   * })\n   *\n   * Struct({\n   *   nodes: {\n   *     nodes: { ... }\n   *   }\n   * })\n   * ```\n   *\n   * They are helpful for defining recursive structs.\n   */\n\n  lazy(schema: () => Struct, defaults?: any): Struct\n\n  /**\n   * Literal structs validate their input against a literal value.\n   *\n   * ```js\n   * const Struct = struct.literal(42)\n   *\n   * Struct(42)\n   * ```\n   */\n\n  literal(schema: any, defaults?: any): Struct\n\n  /**\n   * Object structs validate that their input exactly matches an object defined\n   * as a set of properties with associated types.\n   *\n   * ```js\n   * const Struct = struct.object({\n   *   id: 'number',\n   *   name: 'string',\n   * })\n   *\n   * Struct({\n   *   id: 1,\n   *   name: 'Jane Smith',\n   * })\n   * ```\n   *\n   * They are similar to the `?` qualifier in TypeScript.\n   */\n\n  object(schema: {}, defaults?: any): Struct\n\n  /**\n   * Optional structs validate that their input passes a specific struct, or\n   * `undefined`.\n   *\n   * ```js\n   * const Struct = struct.optional('string?')\n   *\n   * Struct('a string of text')\n   * Struct(undefined)\n   * ```\n   *\n   * This is a shorthand for using `struct.union` with `undefined`.\n   */\n\n  optional(schema: any, defaults?: any): Struct\n\n  /**\n   * Partial structs validate that their input partially matches an object\n   * defined as a set of properties with associated types. All of the properties\n   * of the object are optional.\n   *\n   * ```js\n   * const Struct = struct.partial({\n   *   id: 'number'\n   *   name: 'string',\n   * })\n   *\n   * Struct({\n   *   name: 'Jane Smith',\n   * })\n   * ```\n   *\n   * They are similar to the `Partial` utility in TypeScript.\n   */\n\n  partial(schema: {}, defaults?: any): Struct\n\n  /**\n   * Pick structs validate that their input exactly matches a subset of an\n   * object defined as a set of properties with associated types. All of the\n   * properties of its schema are required, but the object can have more that it\n   * does not concern itself with.\n   *\n   * ```js\n   * const Struct = struct.pick({\n   *   id: 'string',\n   *   name: 'string',\n   * })\n   *\n   * Struct({\n   *   id: 1,\n   *   name: 'James Smith',\n   *   email: 'james@example.com',\n   * })\n   * ```\n   *\n   * They are similar to the `Pick` utility in TypeScript.\n   */\n\n  pick(schema: {}, defaults?: any): Struct\n\n  /**\n   * Record structs validate that their input is an object with keys that match\n   * one struct and values that match another. The object can have zero or many\n   * properties set on it.\n   *\n   * ```js\n   * const Struct = struct.record('string', 'number')\n   *\n   * Struct({\n   *   a: 1,\n   *   b: 2,\n   * })\n   * ```\n   *\n   * They are similar to the `Record` utility in TypeScript.\n   */\n\n  record(schema: [any, any], defaults?: any): Struct\n\n  /**\n   * Scalar structs validate that their input passes the `Validator` function\n   * defined for a specific type by name. By default Superstruct ships with a\n   * set of built-in scalars. But you can configure it with custom scalars that\n   * match your domain.\n   *\n   * ```js\n   * const Struct = struct.scalar('string')\n   *\n   * Struct('a string of text')\n   * ```\n   */\n\n  scalar(schema: string, defaults?: any): Struct\n\n  /**\n   * Size structs validate their input has a certain length, by checking its\n   * `length` property. This works strings or arrays.\n   *\n   * ```js\n   * const Struct = struct.size([0, 7])\n   *\n   * Struct([1, 2, 3])\n   * Struct('abcdefg')\n   * ```\n   *\n   * They are helpful for defining unions with array structs.\n   */\n\n  size(schema: [number, number], defaults?: any): Struct\n\n  /**\n   * Tuple structs validate that their input exactly matches a tuple of values,\n   * in length and in type.\n   *\n   * ```js\n   * const Struct = struct.tuple(['string', 'boolean'])\n   *\n   * Struct(['one', true])\n   * ```\n   */\n\n  tuple(schema: any[], defaults?: any): Struct\n\n  /**\n   * Union structs validate that their input matches **at least one** of a set\n   * of different structs.\n   *\n   * ```js\n   * const Struct = struct.union(['string', 'number'])\n   *\n   * Struct('a string')\n   * Struct(42)\n   * ```\n   *\n   * They are similar to the `|` operator in TypeScript.\n   */\n\n  union(schema: any[], defaults?: any): Struct\n\n  /**\n   * The class for errors thrown by `Structs`, defaults to [[StructError]].\n   */\n\n  Error: { new (failures: Failure[]): Error }\n\n  /**\n   * The set of data types that the factory knows.\n   */\n\n  Types: Record<string, Validator>\n}\n","import { superstruct } from './superstruct'\n\n/**\n * The singleton instance of Superstruct that is exported by default, configured\n * with types for all of the JavaScript built-in data types.\n *\n * You can use it if you don't need any custom types. However, if you do want to\n * define custom types, use the [[superstruct]] factory to configure your own\n * [[Superstruct]] instance.\n */\n\nconst struct = superstruct()\n\nexport { struct, superstruct }\nexport { Superstruct } from './superstruct'\nexport { StructError, Failure, Path, Branch } from './struct-error'\nexport { Types, Validator } from './types'\nexport { isStruct, Struct } from './struct'\n"],"names":["Types","any","value","undefined","arguments","kindOf","array","boolean","buffer","date","isNaN","error","float32array","float64array","function","generatorfunction","int16array","int32array","int8array","map","null","number","object","promise","regexp","set","string","symbol","uint16array","uint32array","uint8array","uint8clampedarray","weakmap","weakset","StructError","failures","invariant","length","first","path","type","branch","rest","message","join","JSON","stringify","Object","assign","stack","Error","__proto__","prototype","TypeError","STRUCT","Symbol","isStruct","createStruct","props","struct","Struct","assert","defineProperty","kind","default","defaults","test","check","result","validate","fail","obj","createArray","schema","Array","isArray","Element","i","v","concat","efs","er","push","createDynamic","Dynamic","createEnum","validator","includes","s","createFunction","r","createInstance","name","createInterface","Props","key","keys","k","Prop","pfs","createIntersection","Structs","sch","fs","createLazy","Lazy","createSize","every","n","min","max","createLiteral","createObject","d","Set","p","b","pr","createPartial","union","createPick","createRecord","Key","Value","defs","kfs","kr","vfs","vr","createScalar","createShorthand","tuple","optional","endsWith","slice","scalars","split","intersection","scalar","createTuple","Elements","S","Math","createUnion","superstruct","settings","dynamic","enum","instance","interface","lazy","literal","partial","pick","record","size","BuiltinTypes","types"],"mappings":"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"}