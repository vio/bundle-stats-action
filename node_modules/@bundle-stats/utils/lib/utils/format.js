"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatPercentage = exports.formatCommit = exports.formatNumber = exports.formatDuration = exports.formatFileSize = void 0;
const round_1 = __importDefault(require("lodash/round"));
const FILE_SIZE = {
    BYTE: {
        symbol: 'B',
        multiplier: 1,
    },
    KILO: {
        symbol: 'KiB',
        multiplier: 1024,
    },
    MEGA: {
        symbol: 'MiB',
        multiplier: 1024 * 1024,
    },
};
const DURATION = {
    MILISECOND: {
        symbol: 'ms',
        multiplier: 1,
    },
    SECOND: {
        symbol: 's',
        multiplier: 1000,
    },
    MINUTE: {
        symbol: 'min',
        multiplier: 60 * 1000,
    },
};
function formatFileSize(val) {
    let unit = FILE_SIZE.BYTE;
    if (typeof val !== 'number') {
        return `0${unit.symbol}`;
    }
    if (val < FILE_SIZE.KILO.multiplier) {
        unit = FILE_SIZE.BYTE;
    }
    else if (val < FILE_SIZE.MEGA.multiplier) {
        unit = FILE_SIZE.KILO;
    }
    else {
        unit = FILE_SIZE.MEGA;
    }
    return `${(0, round_1.default)(val / unit.multiplier, 2)}${unit.symbol}`;
}
exports.formatFileSize = formatFileSize;
function formatDuration(val) {
    let unit = DURATION.MILISECOND;
    if (typeof val !== 'number') {
        return `0${unit.symbol}`;
    }
    if (val < DURATION.SECOND.multiplier) {
        unit = DURATION.MILISECOND;
    }
    else if (val < DURATION.MINUTE.multiplier) {
        unit = DURATION.SECOND;
    }
    else {
        unit = DURATION.MINUTE;
    }
    return `${(0, round_1.default)(val / unit.multiplier, 1)}${unit.symbol}`;
}
exports.formatDuration = formatDuration;
function formatNumber(val) {
    if (typeof val !== 'number') {
        return '0';
    }
    return val.toString();
}
exports.formatNumber = formatNumber;
function formatCommit(commitSha) {
    if (!commitSha) {
        return '';
    }
    return commitSha.substr(0, 7);
}
exports.formatCommit = formatCommit;
function formatPercentage(val) {
    if (typeof val !== 'number') {
        return '0%';
    }
    return `${val}%`;
}
exports.formatPercentage = formatPercentage;
//# sourceMappingURL=format.js.map