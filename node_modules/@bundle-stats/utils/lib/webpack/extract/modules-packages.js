"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractModulesPackages = exports.getPackageMetaFromModulePath = void 0;
const max_1 = __importDefault(require("lodash/max"));
const last_1 = __importDefault(require("lodash/last"));
const isEmpty_1 = __importDefault(require("lodash/isEmpty"));
const config_1 = require("../../config");
const constants_1 = require("../constants");
const uniqLast = (data) => {
    const res = [];
    data.forEach((item, index) => {
        if (!data.slice(index + 1).includes(item)) {
            res.push(item);
        }
    });
    return res;
};
const getPackageMetaFromModulePath = (modulePath) => {
    const paths = modulePath.match(constants_1.MODULE_PATH_PACKAGES);
    if (!paths) {
        return null;
    }
    const names = uniqLast(paths
        .map((packagePath) => {
        const found = packagePath.matchAll(constants_1.PACKAGE_PATH_NAME);
        if (!found) {
            return [];
        }
        return [...found].flat().slice(1).filter(Boolean).map((name) => name.replace(/\+/g, '/'));
    })
        .flat());
    if ((0, isEmpty_1.default)(names)) {
        return null;
    }
    const name = (0, last_1.default)(names);
    const pattern = new RegExp(`(.*)(${(0, last_1.default)(paths)}).*`);
    const path = modulePath.replace(pattern, '$1$2').replace(/\/$/, '');
    return {
        id: names.join(config_1.PACKAGES_SEPARATOR),
        name,
        path,
    };
};
exports.getPackageMetaFromModulePath = getPackageMetaFromModulePath;
const extractModulesPackages = (webpackStats, currentExtractedData) => {
    var _a;
    const modules = Object.entries(((_a = currentExtractedData === null || currentExtractedData === void 0 ? void 0 : currentExtractedData.metrics) === null || _a === void 0 ? void 0 : _a.modules) || {});
    const packages = modules.reduce((agg, [modulePath, { value }]) => {
        const packageMeta = (0, exports.getPackageMetaFromModulePath)(modulePath);
        if (!packageMeta) {
            return agg;
        }
        const existingPackageData = agg[packageMeta.id];
        if (!existingPackageData) {
            return {
                ...agg,
                [packageMeta.id]: {
                    name: packageMeta.name,
                    path: packageMeta.path,
                    value,
                },
            };
        }
        if (existingPackageData.path === packageMeta.path) {
            return {
                ...agg,
                [packageMeta.id]: {
                    ...existingPackageData,
                    value: existingPackageData.value + value,
                },
            };
        }
        const existingPackageWithEqualPath = Object.entries(agg).find(([_, packageData]) => packageData.path === packageMeta.path);
        if (existingPackageWithEqualPath) {
            const [name, data] = existingPackageWithEqualPath;
            return {
                ...agg,
                [name]: {
                    ...data,
                    value: data.value + value,
                },
            };
        }
        const lastIndex = (0, max_1.default)(Object.keys(agg)
            .map((id) => id.split('~'))
            .filter(([id]) => id === packageMeta.id)
            .map(([_, index]) => parseInt(index, 10))) || 0;
        const packageName = [packageMeta.id, lastIndex + 1].join(config_1.PACKAGE_ID_SEPARATOR);
        return {
            ...agg,
            [packageName]: {
                name: packageMeta.name,
                path: packageMeta.path,
                value,
            },
        };
    }, {});
    return { metrics: { packages } };
};
exports.extractModulesPackages = extractModulesPackages;
//# sourceMappingURL=modules-packages.js.map