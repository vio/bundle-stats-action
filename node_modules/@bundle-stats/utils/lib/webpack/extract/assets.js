"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractAssets = void 0;
const isEmpty_1 = __importDefault(require("lodash/isEmpty"));
const utils_1 = require("../utils");
const IGNORE_PATTERN = /\.(map|LICENSE\.txt)$/;
const extractAssets = (webpackStats) => {
    const webpackAssets = webpackStats.assets;
    const webpackChunks = webpackStats.chunks;
    let initialAssetNames = [];
    let entryAssetNames = [];
    webpackChunks?.forEach((webpackChunk) => {
        if (webpackChunk.initial && webpackChunk.files && webpackChunk.files?.length > 0) {
            initialAssetNames = initialAssetNames.concat(webpackChunk.files);
        }
        if (webpackChunk.entry && webpackChunk.files && webpackChunk.files?.length > 0) {
            entryAssetNames = entryAssetNames.concat(webpackChunk.files);
        }
    });
    const normalizedChunks = webpackChunks?.map(({ id, names, files }) => ({
        id: (0, utils_1.normalizeChunkId)(id),
        name: names?.join('+') || `chunk-${id}`,
        files,
    }));
    const assets = webpackAssets?.reduce((agg, asset) => {
        const baseName = asset?.name.split('?')[0];
        if (IGNORE_PATTERN.test(baseName)) {
            return agg;
        }
        const assetChunk = normalizedChunks?.find((chunk) => chunk.files?.includes(asset.name));
        const normalizedName = (0, utils_1.getAssetName)(baseName);
        const { size, name } = asset;
        agg[normalizedName] = {
            name: baseName,
            value: size || 0,
            isEntry: entryAssetNames.includes(name),
            isInitial: initialAssetNames.includes(name),
            isChunk: Boolean(assetChunk),
            ...(assetChunk && { chunkId: assetChunk.id }),
        };
        return agg;
    }, {}) || {};
    return {
        metrics: {
            assets,
        },
        ...(!(0, isEmpty_1.default)(normalizedChunks)
            ? {
                meta: {
                    chunks: normalizedChunks?.map(({ id, name }) => ({ id, name })) || [],
                },
            }
            : {}),
    };
};
exports.extractAssets = extractAssets;
//# sourceMappingURL=assets.js.map