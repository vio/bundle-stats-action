"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractModulesPackagesDuplicate = void 0;
const get_1 = __importDefault(require("lodash/get"));
const map_1 = __importDefault(require("lodash/map"));
const orderBy_1 = __importDefault(require("lodash/orderBy"));
const sum_1 = __importDefault(require("lodash/sum"));
const config_1 = require("../../config");
const extractModulesPackagesDuplicate = (webpackStats, currentExtractedData) => {
    const source = (0, get_1.default)(currentExtractedData, 'metrics.packages', {});
    const packagesByName = Object.entries(source).reduce((agg, [packageId, packageData]) => {
        const { name } = packageData;
        const existingPackageData = agg[name];
        return {
            ...agg,
            [name]: {
                ...existingPackageData,
                children: [
                    ...((existingPackageData === null || existingPackageData === void 0 ? void 0 : existingPackageData.children) || []),
                    {
                        name: packageId,
                        value: packageData.value,
                    },
                ],
            },
        };
    }, {});
    const { count, duplicatePackages } = Object.entries(packagesByName).reduce((agg, [name, data]) => {
        const duplicateInstances = data.children.length - 1;
        if (duplicateInstances === 0) {
            return agg;
        }
        return {
            count: agg.count + duplicateInstances,
            duplicatePackages: [
                ...(agg.duplicatePackages || []),
                {
                    name,
                    value: (0, sum_1.default)((0, map_1.default)(data.children, 'value')),
                    ...data,
                },
            ],
        };
    }, { count: 0, duplicatePackages: [] });
    if (!count) {
        return {
            metrics: {
                duplicatePackagesCount: {
                    value: count,
                },
            },
        };
    }
    const duplicatePackagesByName = (0, orderBy_1.default)(duplicatePackages, 'value', 'desc').reduce((agg, { name, ...duplicatePackageData }) => ({
        ...agg,
        [name]: {
            ...duplicatePackageData,
            children: (0, orderBy_1.default)(duplicatePackageData.children, 'value', 'desc'),
        },
    }), {});
    const data = Object.entries(duplicatePackagesByName).reduce((agg, [packageName, duplicatePackageData]) => ({
        ...agg,
        [packageName]: duplicatePackageData.children.map(({ name }) => name),
    }), {});
    return {
        insights: {
            duplicatePackages: {
                type: config_1.INSIGHT_WARNING,
                data,
            },
        },
        metrics: {
            duplicatePackagesCount: {
                value: count,
            },
        },
    };
};
exports.extractModulesPackagesDuplicate = extractModulesPackagesDuplicate;
//# sourceMappingURL=modules-packages-duplicate.js.map