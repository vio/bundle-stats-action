"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReport = void 0;
const isEmpty_1 = __importDefault(require("lodash/isEmpty"));
const config_1 = require("../config");
const metrics_1 = require("../utils/metrics");
const webpack = __importStar(require("../webpack"));
const package_json_1 = require("../../package.json");
const createReport = (jobs) => {
    var _a;
    const insights = (_a = jobs[0]) === null || _a === void 0 ? void 0 : _a.insights;
    const summary = config_1.SOURCE_PATHS.reduce((agg, sourceId) => {
        var _a, _b;
        const sourceSummary = (_b = (_a = jobs[0]) === null || _a === void 0 ? void 0 : _a.summary) === null || _b === void 0 ? void 0 : _b[sourceId];
        if (!sourceSummary) {
            return agg;
        }
        const output = Object.entries(sourceSummary).map(([metricId, summaryData]) => {
            const metric = (0, metrics_1.getGlobalMetricType)(`${sourceId}.${metricId}`);
            const { current = 0, baseline = 0 } = summaryData;
            const info = (0, metrics_1.getMetricRunInfo)(metric, current, baseline);
            return {
                label: metric.label,
                ...info,
            };
        });
        return {
            ...agg,
            [sourceId]: output,
        };
    }, {});
    return {
        createdAt: new Date().toISOString(),
        version: package_json_1.version,
        runs: jobs.map(({ internalBuildNumber, meta }) => ({
            ...meta,
            internalBuildNumber,
        })),
        summary,
        ...(!(0, isEmpty_1.default)(insights) ? { insights } : {}),
        ...webpack.compare(jobs),
    };
};
exports.createReport = createReport;
//# sourceMappingURL=create.js.map