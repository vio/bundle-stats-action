"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddRowMetricData = void 0;
const get_1 = __importDefault(require("lodash/get"));
const metrics_1 = require("../utils/metrics");
const get_metric_changed_1 = require("./get-metric-changed");
const getAddRowMetricData = (metricType) => (row) => {
    const { key, runs } = row;
    const metric = (0, metrics_1.getGlobalMetricType)(key, typeof metricType === 'string' && metricType);
    const { biggerIsBetter, label } = metric;
    const processedRuns = runs.map((run, index) => {
        if (!run || typeof run.value === 'undefined' || run.value === null) {
            return null;
        }
        const metricRunInfo = (0, metrics_1.getMetricRunInfo)(metric, run.value, (index + 1 < runs.length) ? (0, get_1.default)(runs, [index + 1, 'value'], 0) : undefined);
        return {
            ...run,
            ...metricRunInfo,
        };
    });
    return {
        ...row,
        biggerIsBetter,
        label,
        changed: (0, get_metric_changed_1.getMetricChanged)(runs),
        runs: processedRuns,
    };
};
exports.getAddRowMetricData = getAddRowMetricData;
//# sourceMappingURL=add-row-metric-data.js.map