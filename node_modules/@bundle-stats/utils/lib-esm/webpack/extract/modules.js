import isEmpty from 'lodash/isEmpty';
import { getModuleName, normalizeChunkId } from '../utils';
export const extractModules = (webpackStats) => {
    const modulesSource = (webpackStats === null || webpackStats === void 0 ? void 0 : webpackStats.modules) || [];
    if (!modulesSource) {
        return { metrics: { modules: {} } };
    }
    const allModules = modulesSource.reduce((agg, moduleEntry) => {
        if (!moduleEntry.modules) {
            agg.push(moduleEntry);
            return agg;
        }
        agg = agg.concat(moduleEntry.modules.map((concatenatedModule) => ({
            ...concatenatedModule,
            chunks: moduleEntry.chunks,
        })));
        return agg;
    }, []);
    const modules = allModules.reduce((agg, moduleEntry) => {
        const { name, size, chunks } = moduleEntry;
        const normalizedName = getModuleName(name);
        if (isEmpty(chunks)) {
            return agg;
        }
        agg[normalizedName] = {
            name,
            value: size,
            chunkIds: chunks.map(normalizeChunkId),
        };
        return agg;
    }, {});
    return { metrics: { modules } };
};
//# sourceMappingURL=modules.js.map