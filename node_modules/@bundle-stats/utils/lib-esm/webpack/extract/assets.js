import isEmpty from 'lodash/isEmpty';
import { getAssetName, normalizeChunkId } from '../utils';
const IGNORE_PATTERN = /\.(map|LICENSE\.txt)$/;
export const extractAssets = (webpackStats) => {
    const webpackAssets = webpackStats.assets;
    const webpackChunks = webpackStats.chunks;
    let initialAssetNames = [];
    let entryAssetNames = [];
    webpackChunks === null || webpackChunks === void 0 ? void 0 : webpackChunks.forEach((webpackChunk) => {
        var _a, _b;
        if (webpackChunk.initial && webpackChunk.files && ((_a = webpackChunk.files) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            initialAssetNames = initialAssetNames.concat(webpackChunk.files);
        }
        if (webpackChunk.entry && webpackChunk.files && ((_b = webpackChunk.files) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            entryAssetNames = entryAssetNames.concat(webpackChunk.files);
        }
    });
    const normalizedChunks = webpackChunks === null || webpackChunks === void 0 ? void 0 : webpackChunks.map(({ id, names, files }) => ({
        id: normalizeChunkId(id),
        name: (names === null || names === void 0 ? void 0 : names.join('+')) || `chunk-${id}`,
        files,
    }));
    const assets = (webpackAssets === null || webpackAssets === void 0 ? void 0 : webpackAssets.reduce((agg, asset) => {
        const baseName = asset === null || asset === void 0 ? void 0 : asset.name.split('?')[0];
        if (IGNORE_PATTERN.test(baseName)) {
            return agg;
        }
        const assetChunk = normalizedChunks === null || normalizedChunks === void 0 ? void 0 : normalizedChunks.find((chunk) => { var _a; return (_a = chunk.files) === null || _a === void 0 ? void 0 : _a.includes(asset.name); });
        const normalizedName = getAssetName(baseName);
        const { size, name } = asset;
        agg[normalizedName] = {
            name: baseName,
            value: size || 0,
            isEntry: entryAssetNames.includes(name),
            isInitial: initialAssetNames.includes(name),
            isChunk: Boolean(assetChunk),
            ...(assetChunk && { chunkId: assetChunk.id }),
        };
        return agg;
    }, {})) || {};
    return {
        metrics: {
            assets,
        },
        ...(!isEmpty(normalizedChunks)
            ? {
                meta: {
                    chunks: (normalizedChunks === null || normalizedChunks === void 0 ? void 0 : normalizedChunks.map(({ id, name }) => ({ id, name }))) || [],
                },
            }
            : {}),
    };
};
//# sourceMappingURL=assets.js.map