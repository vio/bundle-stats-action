import mergeWith from 'lodash/mergeWith';
const mergeWithRuns = (runIndex, runsCount) => (aggregated, currentRun) => {
    const runs = aggregated || Array(runsCount).fill(null);
    runs[runIndex] = currentRun;
    return runs;
};
export const mergeMetricsByKey = (runs, rowTransformers) => {
    const runsCount = runs.length;
    const metricsById = runs.reduce((aggregated, run, index) => mergeWith(aggregated, run, mergeWithRuns(index, runsCount)), {});
    return Object.entries(metricsById).map(([key, value]) => {
        const row = { key, runs: value };
        if (!rowTransformers) {
            return row;
        }
        return rowTransformers.reduce((aggregatedRow, rowTransformer) => rowTransformer(aggregatedRow), row);
    });
};
//# sourceMappingURL=merge-metrics-by-key.js.map