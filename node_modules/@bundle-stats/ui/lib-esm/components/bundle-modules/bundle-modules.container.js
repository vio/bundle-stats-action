import _uniqBy from "lodash/uniqBy";
import _intersection from "lodash/intersection";
import _merge from "lodash/merge";
import _max from "lodash/max";
import _map from "lodash/map";
import _get from "lodash/get";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useMemo } from 'react';
import { compose, withProps } from 'recompose';
import * as webpack from '@bundle-stats/utils/lib-esm/webpack';
import { MODULE_CHUNK, MODULE_FILTERS, MODULE_FILE_TYPE, MODULE_SOURCE_TYPE, getModuleChunkFilters, getModuleSourceTypeFilters, getModuleFileTypeFilters, getModuleSourceFileType } from '@bundle-stats/utils';
import { withCustomSort } from '../../hocs/with-custom-sort';
import { withFilteredItems } from '../../hocs/with-filtered-items';
import { withSearch } from '../../hocs/with-search';
import { SORT_BY_NAME, SORT_BY_SIZE, SORT_BY_DELTA, SORT_BY } from './bundle-modules.constants';

var addRowSourceFlag = function addRowSourceFlag(row) {
  var key = row.key;
  var thirdParty = Boolean(key.match(webpack.MODULE_PATH_PACKAGES));
  return _objectSpread(_objectSpread({}, row), {}, {
    thirdParty: thirdParty
  });
};

var getCustomSort = function getCustomSort(sortBy) {
  return function (item) {
    if (sortBy === SORT_BY_NAME) {
      return item.key;
    }

    if (sortBy === SORT_BY_SIZE) {
      return _get(item, 'runs[0].value', 0);
    }

    if (sortBy === SORT_BY_DELTA) {
      return _get(item, 'runs[0].deltaPercentage', 0);
    }

    return [!item.changed, item.key];
  };
};

var getRowFilter = function getRowFilter(filters) {
  return function (row) {
    // Skip not changed rows
    if (filters[MODULE_FILTERS.CHANGED] && !row.changed) {
      return false;
    } // Skip not matching source type


    if (!(filters[MODULE_SOURCE_TYPE + "." + MODULE_FILTERS.FIRST_PARTY] && row.thirdParty === false || filters[MODULE_SOURCE_TYPE + "." + MODULE_FILTERS.THIRD_PARTY] && row.thirdParty === true)) {
      return false;
    } // Skip not matching source file types


    var fileType = getModuleSourceFileType(row.key);

    if (!filters[MODULE_FILE_TYPE + "." + fileType]) {
      return false;
    }

    return true;
  };
};

export default compose(withProps(function (props) {
  var jobs = props.jobs;

  var chunks = _uniqBy(jobs.map(function (job) {
    var _job$meta, _job$meta$webpack;

    return (job == null ? void 0 : (_job$meta = job.meta) == null ? void 0 : (_job$meta$webpack = _job$meta.webpack) == null ? void 0 : _job$meta$webpack.chunks) || [];
  }).flat(), function (_ref) {
    var id = _ref.id;
    return id;
  });

  var chunkIds = _map(chunks, 'id');

  var defaultFilters = _objectSpread(_objectSpread(_objectSpread({
    changed: (jobs == null ? void 0 : jobs.length) > 1
  }, getModuleSourceTypeFilters(true)), getModuleChunkFilters(chunkIds, true)), getModuleFileTypeFilters(true));

  var allEntriesFilters = _objectSpread(_objectSpread(_objectSpread({
    changed: false
  }, getModuleSourceTypeFilters(true)), getModuleChunkFilters(chunkIds, true)), getModuleFileTypeFilters(true));

  return {
    defaultFilters: defaultFilters,
    allEntriesFilters: allEntriesFilters,
    chunks: chunks,
    chunkIds: chunkIds
  };
}), withSearch(), withProps(function (props) {
  var jobs = props.jobs,
      chunkIds = props.chunkIds,
      filters = props.filters; // List of chunkIds with filter value set to `true`

  var includedChunkIds = chunkIds.reduce(function (agg, chunkId) {
    if (_get(filters, MODULE_CHUNK + "." + chunkId)) {
      return [].concat(agg, [chunkId]);
    }

    return agg;
  }, []); // If all the filters are included, return jobs as they are

  if (includedChunkIds.length === chunkIds.length) {
    return {
      jobs: jobs
    };
  }

  var jobsWithFilteredData = jobs.map(function (job) {
    var _job$metrics;

    var _ref2 = (job == null ? void 0 : (_job$metrics = job.metrics) == null ? void 0 : _job$metrics.webpack) || {},
        modules = _ref2.modules;

    var filteredModules = Object.entries(modules).reduce(function (agg, _ref3) {
      var moduleId = _ref3[0],
          moduleEntry = _ref3[1];

      var match = _intersection(moduleEntry.chunkIds, includedChunkIds);

      if (match.length > 0) {
        agg[moduleId] = moduleEntry; // eslint-disable-line no-param-reassign
      }

      return agg;
    }, {}); // Copy job data into a new object to prevent mutations of the original data

    var newJob = _merge({}, job);

    newJob.metrics.webpack.modules = filteredModules;
    return newJob;
  });
  return {
    jobs: jobsWithFilteredData
  };
}), withProps(function (_ref4) {
  var jobs = _ref4.jobs;

  var _useMemo = useMemo(function () {
    return {
      items: webpack.compareBySection.modules(jobs, [addRowSourceFlag]),

      /*
       * total amount of rows depends on the way the modules are merged before any filtering.
       * to avoid running an expensive operation before filtering, we just show the total amount of
       * rows to be the max count between different runs
       */
      totalRowCount: _max(jobs.map(function (job) {
        var _job$metrics2, _job$metrics2$webpack;

        return Object.values((job == null ? void 0 : (_job$metrics2 = job.metrics) == null ? void 0 : (_job$metrics2$webpack = _job$metrics2.webpack) == null ? void 0 : _job$metrics2$webpack.modules) || {}).length;
      }))
    };
  }, [jobs]),
      items = _useMemo.items,
      totalRowCount = _useMemo.totalRowCount;

  return {
    totalRowCount: totalRowCount,
    items: items
  };
}), withFilteredItems(getRowFilter), withCustomSort({
  sortItems: SORT_BY,
  getCustomSort: getCustomSort
}));