var _excluded = ["className"],
    _excluded2 = ["className"],
    _excluded3 = ["className"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import css from './table.module.css';

var THead = function THead(props) {
  return /*#__PURE__*/React.createElement("thead", props);
};

var TBody = function TBody(props) {
  return /*#__PURE__*/React.createElement("tbody", props);
};

var Tr = function Tr(props) {
  var className = props.className,
      restProps = _objectWithoutPropertiesLoose(props, _excluded);

  return /*#__PURE__*/React.createElement("tr", _extends({
    className: cx(css.row, className)
  }, restProps));
};

Tr.defaultProps = {
  className: ''
};
Tr.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string
};

var Th = function Th(props) {
  var className = props.className,
      restProps = _objectWithoutPropertiesLoose(props, _excluded2);

  return /*#__PURE__*/React.createElement("th", _extends({
    className: cx(css.cell, className)
  }, restProps));
};

Th.defaultProps = {
  className: ''
};
Th.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string
};

var Td = function Td(props) {
  var className = props.className,
      restProps = _objectWithoutPropertiesLoose(props, _excluded3);

  return /*#__PURE__*/React.createElement("td", _extends({
    className: cx(css.cell, className)
  }, restProps));
};

Td.defaultProps = {
  className: ''
};
Td.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string
};
export var Table = function Table(_ref) {
  var className = _ref.className,
      emptyMessage = _ref.emptyMessage,
      compact = _ref.compact,
      outline = _ref.outline,
      children = _ref.children;
  var rootClassName = cx(css.root, className, compact && css.compact, outline && css.outline);

  if (!children) {
    return /*#__PURE__*/React.createElement("div", {
      className: cx(rootClassName, css.empty)
    }, emptyMessage);
  }

  return /*#__PURE__*/React.createElement("table", {
    className: rootClassName
  }, children);
};
Table.THead = THead;
Table.TBody = TBody;
Table.Th = Th;
Table.Tr = Tr;
Table.Td = Td;
Table.defaultProps = {
  className: '',
  emptyMessage: 'No entries found.',
  children: null,
  compact: false,
  outline: false
};
Table.propTypes = {
  className: PropTypes.string,
  emptyMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  compact: PropTypes.bool,
  outline: PropTypes.bool,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)])
};