var _excluded = ["className", "size"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import css from './loader.module.css';
export var Loader = function Loader(_ref) {
  var className = _ref.className,
      size = _ref.size,
      restProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  return /*#__PURE__*/React.createElement("span", _extends({
    className: cx(css.root, className, css[size])
  }, restProps));
};
Loader.SIZE_SMALL = 'small';
Loader.SIZE_MEDIUM = 'medium';
Loader.SIZE_LARGE = 'large';
Loader.SIZES = [Loader.SIZE_SMALL, Loader.SIZE_MEDIUM, Loader.SIZE_LARGE];
Loader.defaultProps = {
  className: '',
  size: Loader.SIZE_MEDIUM
};
Loader.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string,

  /** Size modifier */
  size: PropTypes.oneOf(Loader.SIZES)
};