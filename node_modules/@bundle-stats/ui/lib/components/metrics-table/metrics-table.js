"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetricsTable = void 0;

var _sum2 = _interopRequireDefault(require("lodash/fp/sum"));

var _map2 = _interopRequireDefault(require("lodash/fp/map"));

var _flow2 = _interopRequireDefault(require("lodash/fp/flow"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("@bundle-stats/utils");

var _table = require("../../ui/table");

var _metric = require("../metric");

var _delta = require("../delta");

var _jobName = require("../job-name");

var _metricsTableModule = _interopRequireDefault(require("./metrics-table.module.css"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var METRIC_TYPE_DATA = (0, _utils.getGlobalMetricType)(null, _utils.METRIC_TYPE_FILE_SIZE);

var getRowsRunTotal = function getRowsRunTotal(rows, runIndex) {
  return (0, _flow2["default"])((0, _map2["default"])(function (row) {
    return (0, _get2["default"])(row, "runs[".concat(runIndex, "].value"), 0);
  }), _sum2["default"])(rows);
};

var getHeaderLabelCells = function getHeaderLabelCells(rows) {
  return function (run, runIndex, runs) {
    var isBaseline = runIndex === runs.length - 1;
    var className = (0, _classnames["default"])(_metricsTableModule["default"].value, isBaseline ? _metricsTableModule["default"].baseline : _metricsTableModule["default"].current);

    if (!run) {
      return [{
        children: '-',
        className: className
      }].concat(_toConsumableArray(!isBaseline ? [{
        children: ' ',
        className: _metricsTableModule["default"].delta
      }] : []));
    }

    var label = run.label,
        internalBuildNumber = run.internalBuildNumber;

    var jobName = /*#__PURE__*/_react["default"].createElement(_jobName.JobName, {
      title: runIndex === 0 ? 'Current' : 'Baseline',
      internalBuildNumber: internalBuildNumber,
      className: _metricsTableModule["default"].jobName
    }, label);

    return [// Value column
    {
      children: jobName,
      className: className
    }].concat(_toConsumableArray(!isBaseline ? [{
      children: ' ',
      className: (0, _classnames["default"])(_metricsTableModule["default"].delta)
    }] : []));
  };
};

var getHeaderTotalCells = function getHeaderTotalCells(rows) {
  return function (run, runIndex, runs) {
    var isBaseline = runIndex === runs.length - 1;
    var className = (0, _classnames["default"])(_metricsTableModule["default"].value, isBaseline ? _metricsTableModule["default"].baseline : _metricsTableModule["default"].current);
    var currentRunTotal = getRowsRunTotal(rows, runIndex);
    var baselineRunTotal = !isBaseline && getRowsRunTotal(rows, runIndex + 1);
    var infoTotal = (0, _utils.getMetricRunInfo)(METRIC_TYPE_DATA, currentRunTotal, baselineRunTotal);
    return [// Value column
    {
      children: /*#__PURE__*/_react["default"].createElement(_metric.Metric, {
        className: _metricsTableModule["default"].tableHeaderRunMetric,
        value: infoTotal.displayValue
      }),
      className: className
    }].concat(_toConsumableArray(!isBaseline ? [{
      children: /*#__PURE__*/_react["default"].createElement(_delta.Delta, {
        displayValue: infoTotal.displayDeltaPercentage,
        deltaType: infoTotal.deltaType
      }),
      className: _metricsTableModule["default"].delta
    }] : []));
  };
};

var getHeaderRows = function getHeaderRows(runs, items, showHeaderSum, title) {
  return [{
    className: _metricsTableModule["default"].headerRowColumns,
    cells: [// Metric name column - one empty strying to render the column
    {
      children: title || ' ',
      className: _metricsTableModule["default"].metricName,
      rowSpan: showHeaderSum ? 2 : 1
    }].concat(_toConsumableArray(runs.map(getHeaderLabelCells(items)).flat()))
  }].concat(_toConsumableArray(showHeaderSum ? [{
    className: _metricsTableModule["default"].headerRowTotals,
    cells: runs.map(getHeaderTotalCells(items)).flat()
  }] : []));
};

var generateRowCells = function generateRowCells(item, index, items) {
  var isBaseline = index === items.length - 1; // eslint-disable-next-line react/destructuring-assignment

  if (!item || typeof item.value === 'undefined') {
    return ['-'].concat(_toConsumableArray(!isBaseline ? [''] : []));
  }

  var displayValue = item.displayValue,
      deltaPercentage = item.deltaPercentage,
      displayDeltaPercentage = item.displayDeltaPercentage,
      deltaType = item.deltaType;
  var cells = [/*#__PURE__*/_react["default"].createElement(_metric.Metric, {
    value: displayValue
  })];

  if (!isBaseline) {
    cells.push(typeof deltaPercentage === 'number' && /*#__PURE__*/_react["default"].createElement(_delta.Delta, {
      displayValue: displayDeltaPercentage,
      deltaType: deltaType
    }));
  }

  return cells;
};

var getRows = function getRows(runs, items, renderRowHeader) {
  return items.map(function (item, index) {
    var changed = item.changed;
    return {
      key: (item === null || item === void 0 ? void 0 : item.key) || index,
      className: changed ? '' : _metricsTableModule["default"].unchanged,
      cells: [// Metric name
      renderRowHeader(item)].concat(_toConsumableArray(item.runs.map(generateRowCells).flat()))
    };
  });
};

var MetricsTable = function MetricsTable(_ref) {
  var className = _ref.className,
      renderRowHeader = _ref.renderRowHeader,
      runs = _ref.runs,
      items = _ref.items,
      emptyMessage = _ref.emptyMessage,
      showHeaderSum = _ref.showHeaderSum,
      headerRows = _ref.headerRows,
      title = _ref.title;

  var _useMemo = (0, _react.useMemo)(function () {
    var headerColumns = getHeaderRows(runs, items, showHeaderSum, title);
    return {
      headers: [].concat(_toConsumableArray(headerRows), _toConsumableArray(headerColumns)),
      // First header row has the column class names
      columnClassNames: headerColumns[0].cells.map(function (headerColumn) {
        return headerColumn.className;
      })
    };
  }, [headerRows, runs, items, showHeaderSum, title]),
      headers = _useMemo.headers,
      columnClassNames = _useMemo.columnClassNames;

  var rows = (0, _react.useMemo)(function () {
    return getRows(runs, items, renderRowHeader);
  }, [runs, items, renderRowHeader]);
  var rootClassName = (0, _classnames["default"])(_metricsTableModule["default"].root, className, runs.length > 1 && _metricsTableModule["default"].multipleRuns, showHeaderSum && _metricsTableModule["default"].showHeaderSum);
  return /*#__PURE__*/_react["default"].createElement(_table.Table, {
    className: rootClassName,
    compact: true
  }, /*#__PURE__*/_react["default"].createElement(_table.Table.THead, null, headers.map(function (headerRow) {
    var _ref2 = headerRow.cells ? headerRow : {
      cells: headerRow
    },
        cells = _ref2.cells,
        rowClassName = _ref2.className;

    return /*#__PURE__*/_react["default"].createElement(_table.Table.Tr, {
      className: rowClassName
    }, cells.map(function (header) {
      return /*#__PURE__*/_react["default"].createElement(_table.Table.Th, header);
    }));
  })), /*#__PURE__*/_react["default"].createElement(_table.Table.TBody, null, !(0, _isEmpty2["default"])(rows) ? rows.map(function (_ref3) {
    var key = _ref3.key,
        rowClassName = _ref3.className,
        cells = _ref3.cells;
    return /*#__PURE__*/_react["default"].createElement(_table.Table.Tr, {
      key: key,
      className: rowClassName
    }, cells.map(function (cell, index) {
      return /*#__PURE__*/_react["default"].createElement(_table.Table.Td, {
        className: columnClassNames[index]
      }, cell);
    }));
  }) : /*#__PURE__*/_react["default"].createElement(_table.Table.Tr, null, /*#__PURE__*/_react["default"].createElement(_table.Table.Td, {
    className: _metricsTableModule["default"].empty,
    colSpan: (columnClassNames === null || columnClassNames === void 0 ? void 0 : columnClassNames.length) || 1
  }, emptyMessage))));
};

exports.MetricsTable = MetricsTable;
MetricsTable.defaultProps = {
  className: '',
  renderRowHeader: function renderRowHeader(item) {
    return item.label;
  },
  emptyMessage: 'No entries found.',
  showHeaderSum: false,
  headerRows: [],
  title: ''
};
MetricsTable.propTypes = {
  className: _propTypes["default"].string,
  renderRowHeader: _propTypes["default"].func,
  runs: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    internalBuildNumber: _propTypes["default"].number
  })).isRequired,
  items: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    key: _propTypes["default"].string,
    label: _propTypes["default"].string,
    runs: _propTypes["default"].arrayOf(_propTypes["default"].shape({
      displayValue: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
      displayDelta: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
    }))
  })).isRequired,
  emptyMessage: _propTypes["default"].element,
  showHeaderSum: _propTypes["default"].bool,
  headerRows: _propTypes["default"].arrayOf(_propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].element, _propTypes["default"].shape({
    children: _propTypes["default"].node
  })]))),
  title: _propTypes["default"].element
};