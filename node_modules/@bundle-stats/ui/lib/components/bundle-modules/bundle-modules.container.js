"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _uniqBy2 = _interopRequireDefault(require("lodash/uniqBy"));

var _intersection2 = _interopRequireDefault(require("lodash/intersection"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _max2 = _interopRequireDefault(require("lodash/max"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = require("react");

var _recompose = require("recompose");

var webpack = _interopRequireWildcard(require("@bundle-stats/utils/lib-esm/webpack"));

var _utils = require("@bundle-stats/utils");

var _withCustomSort = require("../../hocs/with-custom-sort");

var _withFilteredItems = require("../../hocs/with-filtered-items");

var _withSearch = require("../../hocs/with-search");

var _bundleModules = require("./bundle-modules.constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var addRowSourceFlag = function addRowSourceFlag(row) {
  var key = row.key;
  var thirdParty = Boolean(key.match(webpack.MODULE_PATH_PACKAGES));
  return _objectSpread(_objectSpread({}, row), {}, {
    thirdParty: thirdParty
  });
};

var getCustomSort = function getCustomSort(sortBy) {
  return function (item) {
    if (sortBy === _bundleModules.SORT_BY_NAME) {
      return item.key;
    }

    if (sortBy === _bundleModules.SORT_BY_SIZE) {
      return (0, _get2["default"])(item, 'runs[0].value', 0);
    }

    if (sortBy === _bundleModules.SORT_BY_DELTA) {
      return (0, _get2["default"])(item, 'runs[0].deltaPercentage', 0);
    }

    return [!item.changed, item.key];
  };
};

var getRowFilter = function getRowFilter(filters) {
  return function (row) {
    // Skip not changed rows
    if (filters[_utils.MODULE_FILTERS.CHANGED] && !row.changed) {
      return false;
    } // Skip not matching source type


    if (!(filters["".concat(_utils.MODULE_SOURCE_TYPE, ".").concat(_utils.MODULE_FILTERS.FIRST_PARTY)] && row.thirdParty === false || filters["".concat(_utils.MODULE_SOURCE_TYPE, ".").concat(_utils.MODULE_FILTERS.THIRD_PARTY)] && row.thirdParty === true)) {
      return false;
    } // Skip not matching source file types


    var fileType = (0, _utils.getModuleSourceFileType)(row.key);

    if (!filters["".concat(_utils.MODULE_FILE_TYPE, ".").concat(fileType)]) {
      return false;
    }

    return true;
  };
};

var _default = (0, _recompose.compose)((0, _recompose.withProps)(function (props) {
  var jobs = props.jobs;
  var chunks = (0, _uniqBy2["default"])(jobs.map(function (job) {
    var _job$meta, _job$meta$webpack;

    return (job === null || job === void 0 ? void 0 : (_job$meta = job.meta) === null || _job$meta === void 0 ? void 0 : (_job$meta$webpack = _job$meta.webpack) === null || _job$meta$webpack === void 0 ? void 0 : _job$meta$webpack.chunks) || [];
  }).flat(), function (_ref) {
    var id = _ref.id;
    return id;
  });
  var chunkIds = (0, _map2["default"])(chunks, 'id');

  var defaultFilters = _objectSpread(_objectSpread(_objectSpread({
    changed: (jobs === null || jobs === void 0 ? void 0 : jobs.length) > 1
  }, (0, _utils.getModuleSourceTypeFilters)(true)), (0, _utils.getModuleChunkFilters)(chunkIds, true)), (0, _utils.getModuleFileTypeFilters)(true));

  var allEntriesFilters = _objectSpread(_objectSpread(_objectSpread({
    changed: false
  }, (0, _utils.getModuleSourceTypeFilters)(true)), (0, _utils.getModuleChunkFilters)(chunkIds, true)), (0, _utils.getModuleFileTypeFilters)(true));

  return {
    defaultFilters: defaultFilters,
    allEntriesFilters: allEntriesFilters,
    chunks: chunks,
    chunkIds: chunkIds
  };
}), (0, _withSearch.withSearch)(), (0, _recompose.withProps)(function (props) {
  var jobs = props.jobs,
      chunkIds = props.chunkIds,
      filters = props.filters; // List of chunkIds with filter value set to `true`

  var includedChunkIds = chunkIds.reduce(function (agg, chunkId) {
    if ((0, _get2["default"])(filters, "".concat(_utils.MODULE_CHUNK, ".").concat(chunkId))) {
      return [].concat(_toConsumableArray(agg), [chunkId]);
    }

    return agg;
  }, []); // If all the filters are included, return jobs as they are

  if (includedChunkIds.length === chunkIds.length) {
    return {
      jobs: jobs
    };
  }

  var jobsWithFilteredData = jobs.map(function (job) {
    var _job$metrics;

    var _ref2 = (job === null || job === void 0 ? void 0 : (_job$metrics = job.metrics) === null || _job$metrics === void 0 ? void 0 : _job$metrics.webpack) || {},
        modules = _ref2.modules;

    var filteredModules = Object.entries(modules).reduce(function (agg, _ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          moduleId = _ref4[0],
          moduleEntry = _ref4[1];

      var match = (0, _intersection2["default"])(moduleEntry.chunkIds, includedChunkIds);

      if (match.length > 0) {
        agg[moduleId] = moduleEntry; // eslint-disable-line no-param-reassign
      }

      return agg;
    }, {}); // Copy job data into a new object to prevent mutations of the original data

    var newJob = (0, _merge2["default"])({}, job);
    newJob.metrics.webpack.modules = filteredModules;
    return newJob;
  });
  return {
    jobs: jobsWithFilteredData
  };
}), (0, _recompose.withProps)(function (_ref5) {
  var jobs = _ref5.jobs;

  var _useMemo = (0, _react.useMemo)(function () {
    return {
      items: webpack.compareBySection.modules(jobs, [addRowSourceFlag]),

      /*
       * total amount of rows depends on the way the modules are merged before any filtering.
       * to avoid running an expensive operation before filtering, we just show the total amount of
       * rows to be the max count between different runs
       */
      totalRowCount: (0, _max2["default"])(jobs.map(function (job) {
        var _job$metrics2, _job$metrics2$webpack;

        return Object.values((job === null || job === void 0 ? void 0 : (_job$metrics2 = job.metrics) === null || _job$metrics2 === void 0 ? void 0 : (_job$metrics2$webpack = _job$metrics2.webpack) === null || _job$metrics2$webpack === void 0 ? void 0 : _job$metrics2$webpack.modules) || {}).length;
      }))
    };
  }, [jobs]),
      items = _useMemo.items,
      totalRowCount = _useMemo.totalRowCount;

  return {
    totalRowCount: totalRowCount,
    items: items
  };
}), (0, _withFilteredItems.withFilteredItems)(getRowFilter), (0, _withCustomSort.withCustomSort)({
  sortItems: _bundleModules.SORT_BY,
  getCustomSort: getCustomSort
}));

exports["default"] = _default;