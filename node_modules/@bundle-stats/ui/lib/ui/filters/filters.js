"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Filters = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _flexStack = require("../../layout/flex-stack");

var _dropdown = require("../dropdown");

var _filters = require("./filters.utils");

var _filtersModule = _interopRequireDefault(require("./filters.module.css"));

var _excluded = ["className", "label", "name", "getOnOnlyClick"],
    _excluded2 = ["label"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Filter = function Filter(props) {
  var className = props.className,
      label = props.label,
      name = props.name,
      getOnOnlyClick = props.getOnOnlyClick,
      inputProps = _objectWithoutProperties(props, _excluded);

  var id = "filter-".concat(name);
  var rootClassName = (0, _classnames["default"])(_filtersModule["default"].filter, className);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: rootClassName
  }, /*#__PURE__*/_react["default"].createElement(_flexStack.FlexStack, {
    space: "xxxsmall",
    as: "label",
    className: _filtersModule["default"].filterCheckbox
  }, /*#__PURE__*/_react["default"].createElement("input", _extends({
    className: _filtersModule["default"].filterInput,
    type: "checkbox",
    id: id,
    name: name
  }, inputProps)), /*#__PURE__*/_react["default"].createElement("span", {
    className: _filtersModule["default"].filterLabel,
    title: label
  }, label)), getOnOnlyClick && /*#__PURE__*/_react["default"].createElement("button", {
    className: _filtersModule["default"].filterOnlyButton,
    type: "button",
    onClick: getOnOnlyClick(name)
  }, "only"));
};

Filter.propTypes = {
  className: _propTypes["default"].string,
  name: _propTypes["default"].string.isRequired,
  label: _propTypes["default"].string.isRequired,
  getOnOnlyClick: _propTypes["default"].func
};
Filter.defaultProps = {
  className: '',
  getOnOnlyClick: null
};

var FilterGroup = function FilterGroup(props) {
  var groupKey = props.groupKey,
      data = props.data,
      values = props.values,
      onCheckboxChange = props.onCheckboxChange,
      toggleFilters = props.toggleFilters;

  var groupLabel = data.label,
      groupData = _objectWithoutProperties(data, _excluded2);

  var groupItems = Object.entries(groupData);
  var groupCheckboxes = groupItems.filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        itemKey = _ref2[0],
        item = _ref2[1];

    return typeof (item === null || item === void 0 ? void 0 : item.defaultValue) !== 'undefined';
  });
  var isGroupChecked = groupCheckboxes.map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
        itemKey = _ref4[0];

    return (0, _get2["default"])(values, "".concat(groupKey, ".").concat(itemKey));
  }).reduce(function (agg, val) {
    return agg && val;
  }, true);
  var filterSuffix = (0, _filters.getGroupFiltersLabelSuffix)(groupItems);
  var hasCustomFilterSuffix = !Object.values(_filters.LABELS).includes(filterSuffix);

  var dropdownLabel = /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, "".concat(groupLabel, ":"), "\xA0", /*#__PURE__*/_react["default"].createElement("span", {
    className: (0, _classnames["default"])(hasCustomFilterSuffix && _filtersModule["default"].labelSuffixCustom)
  }, filterSuffix));

  var getOnGroupCheck = function getOnGroupCheck(value) {
    var overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return function () {
      var newFilters = groupCheckboxes.reduce(function (agg, _ref5) {
        var _ref6 = _slicedToArray(_ref5, 1),
            itemKey = _ref6[0];

        return _objectSpread(_objectSpread({}, agg), {}, _defineProperty({}, "".concat(groupKey, ".").concat(itemKey), value));
      }, {});
      toggleFilters(_objectSpread(_objectSpread({}, newFilters), overrides));
    };
  };

  return /*#__PURE__*/_react["default"].createElement(_dropdown.Dropdown, {
    label: dropdownLabel,
    ariaLabel: "".concat(groupLabel, ": ").concat(filterSuffix)
  }, function (_ref7) {
    var MenuItem = _ref7.MenuItem,
        menu = _ref7.menu,
        menuItemClassName = _ref7.menuItemClassName;
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
      className: _filtersModule["default"].filterGroupItems
    }, groupItems.map(function (_ref8) {
      var _ref9 = _slicedToArray(_ref8, 2),
          itemKey = _ref9[0],
          itemData = _ref9[1];

      var id = [groupKey, itemKey].join('.');

      var getOnOnlyClick = function getOnOnlyClick() {
        return getOnGroupCheck(false, _defineProperty({}, id, true));
      };

      return /*#__PURE__*/_react["default"].createElement(MenuItem, _extends({
        key: id
      }, menu, {
        className: (0, _classnames["default"])(menuItemClassName, _filtersModule["default"].filterGroupItem)
      }), /*#__PURE__*/_react["default"].createElement(Filter, {
        name: id,
        label: itemData.label,
        onChange: onCheckboxChange,
        checked: values[id],
        disabled: itemData.disabled,
        getOnOnlyClick: getOnOnlyClick
      }));
    })), /*#__PURE__*/_react["default"].createElement("div", {
      className: _filtersModule["default"].filterGroupActions
    }, isGroupChecked ? /*#__PURE__*/_react["default"].createElement(MenuItem, {
      id: "clear-all",
      as: "button",
      className: menuItemClassName,
      type: "button",
      onClick: getOnGroupCheck(false)
    }, "Clear all") : /*#__PURE__*/_react["default"].createElement(MenuItem, {
      id: "clear-all",
      as: "button",
      className: menuItemClassName,
      type: "button",
      onClick: getOnGroupCheck(true)
    }, "Check all")));
  });
};

FilterGroup.propTypes = {
  groupKey: _propTypes["default"].string.isRequired,
  data: _propTypes["default"].object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  values: _propTypes["default"].object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  onCheckboxChange: _propTypes["default"].func.isRequired,
  toggleFilters: _propTypes["default"].func.isRequired
};

var Filters = function Filters(props) {
  var className = props.className,
      values = props.values,
      filters = props.filters,
      toggleFilter = props.toggleFilter,
      toggleFilters = props.toggleFilters;

  var onCheckboxChange = function onCheckboxChange(_ref10) {
    var target = _ref10.target;
    return toggleFilter(target.name, target.checked);
  };

  var rootClassName = (0, _classnames["default"])(_filtersModule["default"].root, className);
  return /*#__PURE__*/_react["default"].createElement("form", {
    className: rootClassName
  }, /*#__PURE__*/_react["default"].createElement(_flexStack.FlexStack, {
    className: _filtersModule["default"].items
  }, Object.entries(filters).map(function (_ref11) {
    var _ref12 = _slicedToArray(_ref11, 2),
        name = _ref12[0],
        data = _ref12[1];

    if (typeof (data === null || data === void 0 ? void 0 : data.defaultValue) !== 'undefined') {
      return /*#__PURE__*/_react["default"].createElement(Filter, {
        key: name,
        className: (0, _classnames["default"])(_filtersModule["default"].item, _filtersModule["default"].filterStandalone),
        name: name,
        label: data.label,
        onChange: onCheckboxChange,
        checked: values[name],
        disabled: data.disabled
      });
    }

    return /*#__PURE__*/_react["default"].createElement("div", {
      className: _filtersModule["default"].item
    }, /*#__PURE__*/_react["default"].createElement(FilterGroup, {
      key: name,
      groupKey: name,
      data: data,
      values: values,
      onCheckboxChange: onCheckboxChange,
      toggleFilters: toggleFilters
    }));
  })));
};

exports.Filters = Filters;
Filters.defaultProps = {
  className: ''
};
Filters.propTypes = {
  className: _propTypes["default"].string,
  values: _propTypes["default"].object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  filters: _propTypes["default"].object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  toggleFilter: _propTypes["default"].func.isRequired
};