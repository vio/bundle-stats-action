"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const flow_1 = __importDefault(require("lodash/fp/flow"));
const fromPairs_1 = __importDefault(require("lodash/fp/fromPairs"));
const get_1 = __importDefault(require("lodash/fp/get"));
const map_1 = __importDefault(require("lodash/fp/map"));
const filter_1 = __importDefault(require("lodash/fp/filter"));
const pick_1 = __importDefault(require("lodash/fp/pick"));
const toPairs_1 = __importDefault(require("lodash/fp/toPairs"));
const PATH_IGNORE_PATTERN = '.map$';
exports.default = (source, options = {}) => {
    var _a;
    const pathIgnorePattern = new RegExp(options.pathIgnorePattern || PATH_IGNORE_PATTERN);
    const builtAt = (0, get_1.default)('builtAt')(source);
    const hash = (0, get_1.default)('hash')(source);
    const assets = (0, flow_1.default)([
        (0, get_1.default)('assets'),
        (0, map_1.default)((0, pick_1.default)(['name', 'size'])),
        (0, filter_1.default)(({ name }) => name && !pathIgnorePattern.test(name)),
    ])(source);
    const entrypoints = (0, flow_1.default)([
        (0, get_1.default)('entrypoints'),
        toPairs_1.default,
        (0, map_1.default)(([key, value]) => [key, (0, pick_1.default)('assets')(value)]),
        fromPairs_1.default,
    ])(source);
    const chunks = (0, flow_1.default)([
        (0, get_1.default)('chunks'),
        (0, map_1.default)((0, pick_1.default)(['id', 'entry', 'initial', 'files', 'names'])),
        (0, filter_1.default)(({ id }) => id !== null && typeof id !== 'undefined'),
    ])(source);
    const modules = (_a = source === null || source === void 0 ? void 0 : source.modules) === null || _a === void 0 ? void 0 : _a.map(({ name, size, chunks: moduleChunks, modules: concatenatedModules }) => ({
        name,
        size,
        chunks: moduleChunks === null || moduleChunks === void 0 ? void 0 : moduleChunks.filter((chunkId) => chunkId !== null && typeof chunkId !== 'undefined'),
        modules: concatenatedModules === null || concatenatedModules === void 0 ? void 0 : concatenatedModules.map((concatenatedModule) => ({
            name: concatenatedModule.name,
            size: concatenatedModule.size,
        })),
    }));
    return {
        builtAt,
        hash,
        assets,
        entrypoints,
        chunks,
        modules,
    };
};
//# sourceMappingURL=index.js.map