const PATH_IGNORE_PATTERN = '.map$';
export default (source, options = {}) => {
    var _a, _b, _c;
    const pathIgnorePattern = new RegExp(options.pathIgnorePattern || PATH_IGNORE_PATTERN);
    const { builtAt, hash } = source;
    const assets = ((_a = source.assets) === null || _a === void 0 ? void 0 : _a.reduce((agg, asset) => {
        if (!asset.name || pathIgnorePattern.test(asset.name)) {
            return agg;
        }
        agg.push({
            name: asset.name,
            size: asset.size,
        });
        return agg;
    }, [])) || [];
    const chunks = ((_b = source.chunks) === null || _b === void 0 ? void 0 : _b.reduce((agg, chunk) => {
        if (typeof chunk.id === 'undefined' || chunk.id === null) {
            return agg;
        }
        agg.push({
            id: chunk.id,
            entry: chunk.entry,
            initial: chunk.initial,
            files: chunk.files,
            names: chunk.names,
        });
        return agg;
    }, [])) || [];
    const modules = ((_c = source.modules) === null || _c === void 0 ? void 0 : _c.reduce((agg, moduleStats) => {
        var _a, _b;
        if (!moduleStats.name) {
            return agg;
        }
        const moduleChunks = ((_a = moduleStats.chunks) === null || _a === void 0 ? void 0 : _a.filter((chunkId) => chunkId !== null && typeof chunkId !== 'undefined')) || [];
        const concatenatedModules = (_b = moduleStats.modules) === null || _b === void 0 ? void 0 : _b.reduce((aggConcatenatedModules, concatenatedModule) => {
            if (!concatenatedModule.name) {
                return aggConcatenatedModules;
            }
            aggConcatenatedModules.push({
                name: concatenatedModule.name,
                size: concatenatedModule.size,
            });
            return aggConcatenatedModules;
        }, []);
        agg.push({
            name: moduleStats.name,
            size: moduleStats.size,
            chunks: moduleChunks,
            ...(concatenatedModules && { modules: concatenatedModules }),
        });
        return agg;
    }, [])) || [];
    return {
        builtAt,
        hash,
        assets,
        chunks,
        modules,
    };
};
//# sourceMappingURL=index.js.map