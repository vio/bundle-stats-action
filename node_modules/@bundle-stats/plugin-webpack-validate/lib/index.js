"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const superstruct_1 = require("superstruct");
const get_1 = __importDefault(require("lodash/get"));
const I18N = __importStar(require("./i18n"));
const schemas_1 = require("./schemas");
function extractFailedStructure(webpackSource, failurePath) {
    if (failurePath.length === 0) {
        return null;
    }
    const source = (0, get_1.default)(webpackSource, failurePath);
    if (typeof source === 'object') {
        return {
            path: failurePath.join('.'),
            source,
        };
    }
    return extractFailedStructure(webpackSource, failurePath.slice(0, -1));
}
exports.default = (webpackSource) => {
    const res = (0, superstruct_1.validate)(webpackSource, schemas_1.WebpackSourceStruct);
    if (!res?.[0]) {
        return '';
    }
    const failures = res[0].failures();
    const output = [`${I18N.INVALID}`];
    failures.forEach((failure) => {
        const failureOutput = ['', failure.message, `Path: ${failure.path.join('.')}`];
        const failedSource = extractFailedStructure(webpackSource, failure.path);
        if (failedSource) {
            failureOutput.push(`Failed structure(${failedSource.path}): ${JSON.stringify(failedSource.source, null, 2)}`);
        }
        output.push(failureOutput.join('\n'));
    });
    return output.join('\n');
};
//# sourceMappingURL=index.js.map